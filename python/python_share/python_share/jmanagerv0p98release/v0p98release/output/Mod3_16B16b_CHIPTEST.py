# coding=gbk 
#################################################################################
# chip test python file generated by Jmanager 
# use it in python , to configure chip regs in form like  
#usage: 
#    CHIPREG.U_RAG0x1.set_cur.set(0x1); 
#    CHIPREG.U_RAG0x1.write(0x1); 
#################################################################################


##########################main code ##################################################
#    CHIPREG.U_RAG0x1.set_cur.set(0x1); 
#    CHIPREG.U_RAG0x1.write(0x1); 
from output.base_pyt_reg_definition import *
#from base_pyt_reg_definition import *

class REG0B (pyt_reg):
    def __init__(self, name="REG0B", bus_hd=None, bits_w=16, addr=0, desc="""for reset control""" ):
        super(REG0B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.ab            = pyt_reg_field("ab",            10, 6, 0x1, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""保留""")
        self.reg444d       = pyt_reg_field("reg444d",       1, 4, 0x0, "RO","""取得xx状态， 1： abb； 0：bbb""")
        self.reg3to2d      = pyt_reg_field("reg3to2d",      3, 1, 0x3, "RW","""reg3to2的对于数据*3+1""")
        self.reg00d        = pyt_reg_field("reg00d",        1, 0, 0x0, "RW","""00reg3to2的对于数据*3+1""")
        self.fl = [     self.ab,     self.reserved,     self.reg444d,     self.reg3to2d,     self.reg00d]

class REG2B (pyt_reg):
    def __init__(self, name="REG2B", bus_hd=None, bits_w=16, addr=1, desc="""用于xx控制1""" ):
        super(REG2B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.ac            = pyt_reg_field("ac",            10, 6, 0x1, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""保留""")
        self.reg444e       = pyt_reg_field("reg444e",       1, 4, 0x0, "RO","""取得xx状态， 1： abb； 0：bbb""")
        self.reg3to2e      = pyt_reg_field("reg3to2e",      3, 1, 0x3, "RW","""reg3to2的对于数据*3+1""")
        self.reg00e        = pyt_reg_field("reg00e",        1, 0, 0x0, "RW","""00reg3to2的对于数据*3+1""")
        self.fl = [     self.ac,     self.reserved,     self.reg444e,     self.reg3to2e,     self.reg00e]

class REG3B (pyt_reg):
    def __init__(self, name="REG3B", bus_hd=None, bits_w=16, addr=2, desc="""用于xx控制2""" ):
        super(REG3B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.add           = pyt_reg_field("add",           10, 6, 0x1, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.reserved      = pyt_reg_field("reserved",      3, 3, 0x0, "-","""保留""")
        self.reg444f       = pyt_reg_field("reg444f",       2, 1, 0x0, "RO","""取得xx状态， 1： abb； 0：bbb""")
        self.reg00f        = pyt_reg_field("reg00f",        1, 0, 0x0, "RW","""00reg3to2的对于数据*3+1""")
        self.fl = [     self.add,     self.reserved,     self.reg444f,     self.reg00f]

class REG4B (pyt_reg):
    def __init__(self, name="REG4B", bus_hd=None, bits_w=16, addr=3, desc="""用于xx控制3""" ):
        super(REG4B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.eaaee4        = pyt_reg_field("eaaee4",        10, 6, 0x1, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""保留""")
        self.m2r4_ro_3b    = pyt_reg_field("m2r4_ro_3b",    4, 1, 0x0, "RO","""取得xx状态， 1： abb； 0：bbb""")
        self.m2r4_f0       = pyt_reg_field("m2r4_f0",       1, 0, 0x0, "RW","""00reg3to2的对于数据*3+1""")
        self.fl = [     self.eaaee4,     self.reserved,     self.m2r4_ro_3b,     self.m2r4_f0]

class REG5B (pyt_reg):
    def __init__(self, name="REG5B", bus_hd=None, bits_w=16, addr=4, desc="""用于xx控制4""" ):
        super(REG5B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.rw0x5_8b      = pyt_reg_field("rw0x5_8b",      16, 0, 0xfb, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.fl = [     self.rw0x5_8b]

class REG6B (pyt_reg):
    def __init__(self, name="REG6B", bus_hd=None, bits_w=16, addr=6, desc="""用于xx控制6""" ):
        super(REG6B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.ro0x6_8b      = pyt_reg_field("ro0x6_8b",      16, 0, 0x1, "RO","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.fl = [     self.ro0x6_8b]

class REG7B (pyt_reg):
    def __init__(self, name="REG7B", bus_hd=None, bits_w=16, addr=7, desc="""用于xx控制7""" ):
        super(REG7B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.rw0x7_8b      = pyt_reg_field("rw0x7_8b",      16, 0, 0x1, "RW","""描述寄存器内容5；
1. 开启， 0： 关闭""")
        self.fl = [     self.rw0x7_8b]


######################### pack up all reg to sheet Module ############
class MOD3_16B():
    def __init__(self, bus_hd):
        self.REG0B            = REG0B("U_REG0B" , bus_hd)
        self.REG2B            = REG2B("U_REG2B" , bus_hd)
        self.REG3B            = REG3B("U_REG3B" , bus_hd)
        self.REG4B            = REG4B("U_REG4B" , bus_hd)
        self.REG5B            = REG5B("U_REG5B" , bus_hd)
        self.REG6B            = REG6B("U_REG6B" , bus_hd)
        self.REG7B            = REG7B("U_REG7B" , bus_hd)
        self.rl = [self.REG0B,self.REG2B,self.REG3B,self.REG4B,self.REG5B,self.REG6B,self.REG7B]
        self.dic_name = {\
                             "REG0B":self.REG0B,\
                             "REG2B":self.REG2B,\
                             "REG3B":self.REG3B,\
                             "REG4B":self.REG4B,\
                             "REG5B":self.REG5B,\
                             "REG6B":self.REG6B,\
                             "REG7B":self.REG7B}
        self.dic_addr = { \
                           0x0:self.REG0B,\
                           0x1:self.REG2B,\
                           0x2:self.REG3B,\
                           0x3:self.REG4B,\
                           0x4:self.REG5B,\
                           0x6:self.REG6B,\
                           0x7:self.REG7B}


######################### usage reg module example ############


class FACE_MOD3_16B_BUS_HD():
     def __init__(self,name="FAKE_BUS"):                
          self.name = name                           
     def read (self,addr):                        
         return 0x1f;                               
     def write (self,addr,wdata):                  
         return 0x1;                                



if __name__ == '__main__':     
    bus_hd = FACE_MOD3_16B_BUS_HD()
    CHIP_REG = MOD3_16B(bus_hd)      
    print(CHIP_REG.dic_name.keys()) 
    print(CHIP_REG.dic_addr.keys()) 
                 
