# coding=gbk 
#################################################################################
# chip test python file generated by Jmanager 
# use it in python , to configure chip regs in form like  
#usage: 
#    CHIPREG.U_RAG0x1.set_cur.set(0x1); 
#    CHIPREG.U_RAG0x1.write(0x1); 
#################################################################################


##########################main code ##################################################
#    CHIPREG.U_RAG0x1.set_cur.set(0x1); 
#    CHIPREG.U_RAG0x1.write(0x1); 
from base_pyt_reg_definition import *
#from base_pyt_reg_definition import *

class R04 (pyt_reg):
    def __init__(self, name="R04", bus_hd=None, bits_w=8, addr=4, desc="""Staute Registers error log""" ):
        super(R04,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.global_error_count  = pyt_reg_field("global_error_count", 1, 7, 0x0, "RO","""Global Error Count Since Last Erase Operation 
            0 = No Error or Only 1 Error since last Erase operation
            1 = > 1 Error Count since last Erase operation""")
        self.global_error_log_buck_ov_or_uv  = pyt_reg_field("global_error_log_buck_ov_or_uv", 1, 6, 0x0, "RO","""Global Error Log History for Buck Regulator Output Over or Under Voltage
            0 = No Error Occurred
            1 = Error Occurred""")
        self.global_error_log_vin_bulk_over_voltage  = pyt_reg_field("global_error_log_vin_bulk_over_voltage", 1, 5, 0x0, "RO","""Global Error Log History for VIN_Bulk Over Voltage
            0 = No Error Occurred
            1 = Error Occurred""")
        self.global_error_log_critical_temperature  = pyt_reg_field("global_error_log_critical_temperature", 1, 4, 0x0, "RO","""Global Error Log History for Critical Temperature
            0 = No Error Occurred
            1 = Error Occurred""")
        self.reserved      = pyt_reg_field("reserved",      4, 0, 0x3, "-","""vin uv""")
        self.fl = [     self.global_error_count,     self.global_error_log_buck_ov_or_uv,     self.global_error_log_vin_bulk_over_voltage,     self.global_error_log_critical_temperature,     self.reserved]

class R05 (pyt_reg):
    def __init__(self, name="R05", bus_hd=None, bits_w=8, addr=5, desc="""Status Registers SWABC Power Good""" ):
        super(R05,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      1, 7, 0x9e, "-","""ÃèÊö¼Ä´æÆ÷ÄÚÈÝ5£»
            1. ¿ªÆô£¬ 0£º ¹Ø±Õ""")
        self.swa_power_cood  = pyt_reg_field("swa_power_cood", 1, 6, 0x0, "RO","""PMIC Power On - SWA Power Not Good
            0 = Normal Power On
            1 = Power On - SWA Power Not Good""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""vout ov fault""")
        self.swb_power_cood  = pyt_reg_field("swb_power_cood", 1, 4, 0x0, "RO","""PMIC Power On - SWB Power Not Good
            0 = Normal Power On
            1 = Power On - SWB Power Not Good""")
        self.swc_power_cood  = pyt_reg_field("swc_power_cood", 1, 3, 0x3, "RO","""PMIC Power On - SWC Power Not Good
            0 = Normal Power On
            1 = Power On - SWC Power Not Good""")
        self.pmic_error_log  = pyt_reg_field("pmic_error_log", 3, 0, 0x0, "RO","""PMIC Power On - High Level Status Bit to Indicate Last Known Power Cycle or 
            System Reset
            000 = Normal Power On
            001 = Reserved
            010 = Buck Regulator Output Over or Under Voltage ( This code is a logical OR function of Table 94, ¡°R06¡± [7:0] register bits.)
            011 = Critical Temperature
            100 = VIN_Bulk Input Over Voltage
            101 = Reserved
            110 = Reserved
            111 = Reserved""")
        self.fl = [     self.reserved,     self.swa_power_cood,     self.reserved,     self.swb_power_cood,     self.swc_power_cood,     self.pmic_error_log]

class R06 (pyt_reg):
    def __init__(self, name="R06", bus_hd=None, bits_w=8, addr=6, desc="""Status Registers under voltage""" ):
        super(R06,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_under_voltage_lockout  = pyt_reg_field("swa_under_voltage_lockout", 1, 7, 0x0, "RW","""PMIC Power On - SWA Under Voltage Lockout
            0 = Normal Power On
            1 = Power On - SWA Under Voltage Lockout""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""""")
        self.swb_under_voltage_lockout  = pyt_reg_field("swb_under_voltage_lockout", 1, 5, 0x0, "RO","""PMIC Power On - SWB Under Voltage Lockout
            0 = Normal Power On
            1 = Power On - SWB Under Voltage Lockout""")
        self.swc_under_voltage_lockout  = pyt_reg_field("swc_under_voltage_lockout", 1, 4, 0x0, "RO","""PMIC Power On - SWC Under Voltage Lockout
            0 = Normal Power On
            1 = Power On - SWB Under Voltage Lockout""")
        self.swa_over_voltage  = pyt_reg_field("swa_over_voltage", 1, 3, 0x3, "RO","""PMIC Power On - SWA Over Voltage
            0 = Normal Power On
            1 = Power On - SWA Over Voltage""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""""")
        self.swb_over_voltage  = pyt_reg_field("swb_over_voltage", 1, 1, 0x0, "RO","""PMIC Power On - SWB Over Voltage
            0 = Normal Power On
            1 = Power On - SWB Over Voltage""")
        self.swc_over_voltage  = pyt_reg_field("swc_over_voltage", 1, 0, 0x0, "RO","""PMIC Power On - SWC Over Voltage
            0 = Normal Power On
            1 = Power On - SWC Over Voltage""")
        self.fl = [     self.swa_under_voltage_lockout,     self.reserved,     self.swb_under_voltage_lockout,     self.swc_under_voltage_lockout,     self.swa_over_voltage,     self.reserved,     self.swb_over_voltage,     self.swc_over_voltage]

class R08 (pyt_reg):
    def __init__(self, name="R08", bus_hd=None, bits_w=8, addr=8, desc="""Status Registers Output good""" ):
        super(R08,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      1, 7, 0x0, "-","""reserved""")
        self.critical_temp_shutdown_status  = pyt_reg_field("critical_temp_shutdown_status", 1, 6, 0x0, "RO","""Critical Temperature Shutdown Status
            0 = No Critical Temperature Shutdown
            1 = Critical Temperature Shutdown""")
        self.swa_output_power_good_status  = pyt_reg_field("swa_output_power_good_status", 1, 5, 0x0, "RO","""Switch Node A Output Power Good Status £¨ too low , or too high)
            0 = Power Good
            1 = Power Not Good""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""reserved""")
        self.swb_output_power_good_status  = pyt_reg_field("swb_output_power_good_status", 1, 3, 0x0, "RO","""Switch Node B Output Power Good Status ( on applicable in R4F.0 = 0:  Single Phase Regulator Mode)
            0= Power Good
            1 = Power Not Good  """)
        self.swc_output_power_good_status  = pyt_reg_field("swc_output_power_good_status", 1, 2, 0x0, "RO","""Switch Node C Output Power Good Status
            0 = Power Good
            1 = Power Not Good""")
        self.reserved      = pyt_reg_field("reserved",      1, 1, 0x0, "-","""reserved""")
        self.vin_bulk_input_over_voltage_status  = pyt_reg_field("vin_bulk_input_over_voltage_status", 1, 0, 0x0, "RO","""VIN_Bulk Input Supply Over Voltage Status
            0 = No Over Voltage
            1 = Over Voltage""")
        self.fl = [     self.reserved,     self.critical_temp_shutdown_status,     self.swa_output_power_good_status,     self.reserved,     self.swb_output_power_good_status,     self.swc_output_power_good_status,     self.reserved,     self.vin_bulk_input_over_voltage_status]

class R09 (pyt_reg):
    def __init__(self, name="R09", bus_hd=None, bits_w=8, addr=9, desc="""Status Registers Output Current""" ):
        super(R09,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.pmic_high_temp_warning_status  = pyt_reg_field("pmic_high_temp_warning_status", 1, 7, 0x0, "RO","""PMIC High Temperature Warning Status
            0 = Temperature Below the Warning Threshold
            1 = Temperature Exceeded the Warning Threshold""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""off state""")
        self.vout_1p8v_output_power_good_status  = pyt_reg_field("vout_1p8v_output_power_good_status", 1, 5, 0x0, "RO","""VOUT_1.8V LDO Output Power Good Status
            0 = Power Good
            1 = Power Not Good""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""iout_oc  fault""")
        self.swa_high_output_current_consumption_warning_status  = pyt_reg_field("swa_high_output_current_consumption_warning_status", 1, 3, 0x0, "RO","""Switch Node A High Output Current Consumption Warning Status
            0 = No High Current Consumption Warning
            1 = High Current Consumption Warning""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""temp over""")
        self.swb_high_output_current_consumption_warning_status  = pyt_reg_field("swb_high_output_current_consumption_warning_status", 1, 1, 0x0, "RO","""Switch Node B High Output Current Consumption Warning Status
            0 = No High Current Consumption Warning
            1 = High Current Consumption Warning""")
        self.swc_high_output_current_consumption_warning_status  = pyt_reg_field("swc_high_output_current_consumption_warning_status", 1, 0, 0x0, "RO","""Switch Node C High Output Current Consumption Warning Status
            0 = No High Current Consumption Warning
            1 = High Current Consumption Warning""")
        self.fl = [     self.pmic_high_temp_warning_status,     self.reserved,     self.vout_1p8v_output_power_good_status,     self.reserved,     self.swa_high_output_current_consumption_warning_status,     self.reserved,     self.swb_high_output_current_consumption_warning_status,     self.swc_high_output_current_consumption_warning_status]

class R0A (pyt_reg):
    def __init__(self, name="R0A", bus_hd=None, bits_w=8, addr=10, desc="""Status Register SWABC Output OV""" ):
        super(R0A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_over_voltage_status  = pyt_reg_field("swa_output_over_voltage_status", 1, 7, 0x0, "RO","""Switch Node A Output Over Voltage Status
            0 = No Over Voltage
            1 = Over Voltage""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""""")
        self.swb_output_over_voltage_status  = pyt_reg_field("swb_output_over_voltage_status", 1, 5, 0x0, "RO","""Switch Node B Output Over Voltage Status
( only in single mode)
            0 = No Over Voltage
            1 = Over Voltage""")
        self.swc_output_over_voltage_status  = pyt_reg_field("swc_output_over_voltage_status", 1, 4, 0x0, "RO","""Switch Node C Output Over Voltage Status
            0 = No Over Voltage
            1 = Over Voltage""")
        self.pec_error_status  = pyt_reg_field("pec_error_status", 1, 3, 0x0, "RO","""Packet Error Code Status (Applicable in I3C Basic Mode Only and if enabled )
            0 = No PEC Error
            1 = PEC Error""")
        self.parity_error_status  = pyt_reg_field("parity_error_status", 1, 2, 0x0, "RO","""T Bit Parity Error Status
            0 = No Parity Error
            1 = Parity Error""")
        self.ibi_and_global_status  = pyt_reg_field("ibi_and_global_status", 1, 1, 0x0, "RO","""In Band Interruptand GlobalStatus
            0 = No Pending IBI orOutstanding Status
            1 = Pending IBIor Outstanding Status""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x0, "-","""not above""")
        self.fl = [     self.swa_output_over_voltage_status,     self.reserved,     self.swb_output_over_voltage_status,     self.swc_output_over_voltage_status,     self.pec_error_status,     self.parity_error_status,     self.ibi_and_global_status,     self.reserved]

class R0B (pyt_reg):
    def __init__(self, name="R0B", bus_hd=None, bits_w=8, addr=11, desc="""Status Register current limit Warning""" ):
        super(R0B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_current_limiter_warning_status  = pyt_reg_field("swa_output_current_limiter_warning_status", 1, 7, 0x0, "RO","""Switch Node A Output Current Limiter Warning Status
            0 = No Current Limiter Event
            1 = Current Limiter Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""""")
        self.swb_output_current_limiter_warning_status  = pyt_reg_field("swb_output_current_limiter_warning_status", 1, 5, 0x0, "RO","""Switch Node B Output Current Limiter Warning Status
            0 = No Current Limiter Event
            1 = Current Limiter Event""")
        self.swc_output_current_limiter_warning_status  = pyt_reg_field("swc_output_current_limiter_warning_status", 1, 4, 0x0, "RO","""Switch Node C Output Current Limiter Warning Status
            0 = No Current Limiter Event
            1 = Current Limiter Event""")
        self.swa_output_under_voltage_lockout_status  = pyt_reg_field("swa_output_under_voltage_lockout_status", 1, 3, 0x0, "RO","""Switch Node A Output Under Voltage Lockout Status
            0 = No Under Voltage Lockout
            1 = Under Voltage Lockout""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""T Bit Parity Error Status
            0 = No Parity Error
            1 = Parity Error""")
        self.swb_output_under_voltage_lockout_status  = pyt_reg_field("swb_output_under_voltage_lockout_status", 1, 1, 0x0, "RO","""Switch Node B Output Under Voltage Lockout Status
            0 = No Under Voltage Lockout
            1 = Under Voltage Lockout""")
        self.swc_output_under_voltage_lockout_status  = pyt_reg_field("swc_output_under_voltage_lockout_status", 1, 0, 0x0, "RO","""Switch Node C Output Under Voltage Lockout Status
            0 = No Under Voltage Lockout
            1 = Under Voltage Lockout""")
        self.fl = [     self.swa_output_current_limiter_warning_status,     self.reserved,     self.swb_output_current_limiter_warning_status,     self.swc_output_current_limiter_warning_status,     self.swa_output_under_voltage_lockout_status,     self.reserved,     self.swb_output_under_voltage_lockout_status,     self.swc_output_under_voltage_lockout_status]

class R0C (pyt_reg):
    def __init__(self, name="R0C", bus_hd=None, bits_w=8, addr=12, desc="""OUTPUT_CURRENT_POWER_MEASUREMENT""" ):
        super(R0C,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_current_power_measurement  = pyt_reg_field("swa_output_current_power_measurement", 8, 0, 0x0, "RO","""if R1B¡±[6] = ¡®0¡¯, the PMIC reports current measurement. if ¡°R1B¡±[6] =
            ¡®1¡¯, the PMIC reports power measurement.. 
            .If ¡°R4F¡±[0] = ¡®1¡¯, host adds the current or power reported.¡°R0x0C¡±[7:0] and ¡°R0E¡±[5:0] for total current or power consumption.

            If Table122, ¡°Register R1A[1] = ¡®0¡¯: Switch Node A Output Current or Output Power Measurement" 
            0000 0000 = Un-defined
            0000 0001 = 0.125 A or 125 mW
            0000 0010 = 0.25 A or 250 mW
            0000 0011 = 0.375 A or 375 mW
            0000 0100 = 0.5 A or 500 mW
            0000 0101 = 0.625 A or 625 mW
            0000 0110 = 0.75 A or 750 mW
            0000 0111 = 0.875 A or 875 mW
            0000 1000 = 1.0 A or 1000 mW
            0000 1001 = 1.125 A or 1125 mW
            ...
            ...
            0011 0111 = 6.875 A or 6875 mW
            0011 1000 = 7.0 A or 7000 mW
            0011 1001 = 7.125 A or 7125 mW
            0011 1010 = 7.25 A or 7250 mW
            0011 1011 = 7.375 A or 7375 mW
            0011 1100 = 7.5 A or 7500 mW
            0011 1101 = 7.625 A or 7625 mW
            0011 1110 = 7.75 A or 7750 mW
            0011 1111 >=7.875 A or 7875 mW
            All other encodings are reserved
            If ¡°Register 0x1A¡±[1] = ¡®1¡¯: Sum of SWA, SWB and SWC Output Power "
            0000 0000 = Undefined
            0000 0001 = 125 mW
            0000 0010 = 250 mW
            0000 0011 = 375 mW
            0000 0100 = 500 mW
            ...
            1111 1100 = 31500 mW
            1111 1101 = 31625 mW
            1111 1110 = 31750 mW
            1111 1111 >=31875 mW""")
        self.fl = [     self.swa_output_current_power_measurement]

class R0E (pyt_reg):
    def __init__(self, name="R0E", bus_hd=None, bits_w=8, addr=14, desc="""SWB OUTPUT CURRENT POWER""" ):
        super(R0E,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      2, 6, 0x0, "-","""Reserved""")
        self.swb_output_current_power_measurement  = pyt_reg_field("swb_output_current_power_measurement", 6, 0, 0x0, "RO","""If ¡°R1B¡±[6] = ¡®0¡¯, the PMIC reports current measurement. If  ¡°R1B¡±[6] =¡®1¡¯, the PMIC reports power measurement.
            If ¡°R4F¡±[0] = ¡®1¡¯, host adds the current or power reported in ¡°Rx0C¡±[7:0] and , ¡°R0E¡±[5:0] for total current or power consumption.
            Switch Node B Output Current or Output Power
            Measurement3
            000000 = Un-defined
            000001 = 0.125 A or 125 mW
            000010 = 0.25 A or 250 mW
            000011 = 0.375 A or 375 mW
            000100 = 0.5 A or 500 mW
            000101 = 0.625 A or 625 mW
            000110 = 0.75 A or 750 mW
            000111 = 0.875 A or 875 mW
            001000 = 1.0 A or 1000 mW
            001001 = 1.125 A or 1125 mW
            001010 = 1.25 A or 1250 mW
            ...
            110111 = 6.875 A or 6875 mW
            111000 = 7.0 A or 7000 mW
            111001 = 7.125 A or 7125 mW
            111010 = 7.25 A or 7250 mW
            111011 = 7.375 A or 7375 mW
            111100 = 7.5 A or 7500 mW
            111101 = 7.625 A or 7625 mW
            111110 = 7.75 A or 7750 mW
            111111 ¡Ý7.875 A or 7875 mW""")
        self.fl = [     self.reserved,     self.swb_output_current_power_measurement]

class R0F (pyt_reg):
    def __init__(self, name="R0F", bus_hd=None, bits_w=8, addr=15, desc="""SWC_OUTPUT_CURRENT_POWER_MEASUREMENT""" ):
        super(R0F,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      2, 6, 0x0, "-","""Reserved""")
        self.swc_output_current_power_measurement  = pyt_reg_field("swc_output_current_power_measurement", 6, 0, 0x0, "RO","""Switch Node C Output Current or Output Power
            Measurement
            000000 = Un-defined
            000001 = 0.125 A or 125 mW
            000010 = 0.25 A or 250 mW
            000011 = 0.375 A or 375 mW
            000100 = 0.5 A or 500 mW
            000101 = 0.625 A or 625 mW
            000110 = 0.75 A or 750 mW
            000111 = 0.875 A or 875 mW
            001000 = 1.0 A or 1000 mW
            001001 = 1.125 A or 1125 mW
            ...
            110111 = 6.875 A or 6875 mW
            111000 = 7.0 A or 7000 mW
            111001 = 7.125 A or 7125 mW
            111010 = 7.25 A or 7250 mW
            111011 = 7.375 A or 7375 mW
            111100 = 7.5 A or 7500 mW
            111101 = 7.625 A or 7625 mW
            111110 = 7.75 A or 7750 mW
            111111 ¡Ý7.875 A or 7875 mW""")
        self.fl = [     self.reserved,     self.swc_output_current_power_measurement]

class R10 (pyt_reg):
    def __init__(self, name="R10", bus_hd=None, bits_w=8, addr=16, desc="""clear output good status""" ):
        super(R10,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      2, 6, 0x0, "-","""Switch Node A Output Current Limiter Warning Status
            0 = No Current Limiter Event
            1 = Current Limiter Event""")
        self.clear_swa_output_power_good_status  = pyt_reg_field("clear_swa_output_power_good_status", 1, 5, 0x0, "RW","""Clear SWA Output Power Good Status.
            1 = Clear Register Table104, ¡°Register 0x08¡±[5]""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.clear_swb_output_power_good_status  = pyt_reg_field("clear_swb_output_power_good_status", 1, 3, 0x0, "RW","""Clear SWB Output Power Good Status.
            1 = Clear Register Table104, ¡°Register 0x08¡±[4]""")
        self.clear_swc_output_power_good_status  = pyt_reg_field("clear_swc_output_power_good_status", 1, 2, 0x0, "RW","""Clear SWC Output Power Good Status.
            1 = Clear Register Table104, ¡°Register 0x08¡±[3]""")
        self.reserved      = pyt_reg_field("reserved",      1, 1, 0x0, "-","""Reserved""")
        self.clear_vin_bulk_input_over_voltage_status  = pyt_reg_field("clear_vin_bulk_input_over_voltage_status", 1, 0, 0x0, "RW","""Clear VIN_Bulk Input Supply Over Voltage Status.
            1 = Clear Register Table104, ¡°Register 0x08¡±[0]""")
        self.fl = [     self.reserved,     self.clear_swa_output_power_good_status,     self.reserved,     self.clear_swb_output_power_good_status,     self.clear_swc_output_power_good_status,     self.reserved,     self.clear_vin_bulk_input_over_voltage_status]

class R11 (pyt_reg):
    def __init__(self, name="R11", bus_hd=None, bits_w=8, addr=17, desc="""clear output good status2""" ):
        super(R11,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.clear_pmic_high_temp_warning_status  = pyt_reg_field("clear_pmic_high_temp_warning_status", 1, 7, 0x0, "RW","""Clear PMIC High Temperature Warning Status.
            1 = Clear Register Table105, ¡°Register 0x09¡±""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""Reserved""")
        self.clear_vout_1p8v_output_power_good_status  = pyt_reg_field("clear_vout_1p8v_output_power_good_status", 1, 5, 0x0, "RW","""Clear VOUT_1.8V Output Power Good Status.
            1 = Clear Register Table105, ¡°Register 0x09¡±""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.clear_swa_high_output_current_consumption_warning_status  = pyt_reg_field("clear_swa_high_output_current_consumption_warning_status", 1, 3, 0x0, "RW","""Clear Switch Node A High Output Current Consumption Warning Status.
            1 = Clear Register Table105, ¡°Register 0x09¡±""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""Reserved""")
        self.clear_swb_high_output_current_consumption_warning_status  = pyt_reg_field("clear_swb_high_output_current_consumption_warning_status", 1, 1, 0x0, "RW","""Clear Switch Node B High Output Current Consumption Warning Status.
            1 = Clear Register Table105, ¡°Register 0x09¡±[1]""")
        self.clear_swc_high_output_current_consumption_warning_status  = pyt_reg_field("clear_swc_high_output_current_consumption_warning_status", 1, 0, 0x0, "RW","""Clear Switch Node C High Output Current Consumption Warning Status.
            1 = Clear Register Table105, ¡°Register 0x09¡±[0]""")
        self.fl = [     self.clear_pmic_high_temp_warning_status,     self.reserved,     self.clear_vout_1p8v_output_power_good_status,     self.reserved,     self.clear_swa_high_output_current_consumption_warning_status,     self.reserved,     self.clear_swb_high_output_current_consumption_warning_status,     self.clear_swc_high_output_current_consumption_warning_status]

class R12 (pyt_reg):
    def __init__(self, name="R12", bus_hd=None, bits_w=8, addr=18, desc="""clear ouput over voltage status""" ):
        super(R12,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.clear_swa_output_over_voltage_status  = pyt_reg_field("clear_swa_output_over_voltage_status", 1, 7, 0x0, "RW","""Clear Switch Node A Output Over Voltage Status.
            1 = Clear Register Table106, ¡°Register 0x0A¡±[7]""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""Reserved""")
        self.clear_swb_output_over_voltage_status  = pyt_reg_field("clear_swb_output_over_voltage_status", 1, 5, 0x0, "RW","""Clear Switch Node B Output Over Voltage Status.
            1 = Clear Register Table106, ¡°Register 0x0A¡±[5]""")
        self.clear_swc_output_over_voltage_status  = pyt_reg_field("clear_swc_output_over_voltage_status", 1, 4, 0x0, "RW","""Clear Switch Node C Output Over Voltage Status.
            1 = Clear Register Table106, ¡°Register 0x0A¡±[4]""")
        self.clear_per_error_status  = pyt_reg_field("clear_per_error_status", 1, 3, 0x0, "RW","""Clear PEC Error Status.
            1 = Clear Register Table106, ¡°Register 0x0A¡±[3]""")
        self.clear_parity_error_status  = pyt_reg_field("clear_parity_error_status", 1, 2, 0x0, "RW","""Clear Parity Error Status.
            1 = Clear Register Table106, ¡°Register 0x0A¡±[2]""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.clear_swa_output_over_voltage_status,     self.reserved,     self.clear_swb_output_over_voltage_status,     self.clear_swc_output_over_voltage_status,     self.clear_per_error_status,     self.clear_parity_error_status,     self.reserved]

class R13 (pyt_reg):
    def __init__(self, name="R13", bus_hd=None, bits_w=8, addr=19, desc="""clear current limit status""" ):
        super(R13,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.clear_swa_output_current_limiter_warning_status  = pyt_reg_field("clear_swa_output_current_limiter_warning_status", 1, 7, 0x0, "RW","""Clear Switch Node A Output Current Limiter Warning Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[7]""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""Reserved""")
        self.clear_swb_output_current_limiter_warning_status  = pyt_reg_field("clear_swb_output_current_limiter_warning_status", 1, 5, 0x0, "RW","""Clear Switch Node B Output Current Limiter Warning Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[5]""")
        self.clear_swc_output_current_limiter_warning_status  = pyt_reg_field("clear_swc_output_current_limiter_warning_status", 1, 4, 0x0, "RW","""Clear Switch Node C Output Current Limiter Warning Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[4]""")
        self.clear_swa_output_under_voltage_lockout_status  = pyt_reg_field("clear_swa_output_under_voltage_lockout_status", 1, 3, 0x0, "RW","""Clear Switch Node A Output Under Voltage Lockout Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[3]""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""Reserved""")
        self.clear_swb_output_under_voltage_lockout_status  = pyt_reg_field("clear_swb_output_under_voltage_lockout_status", 1, 1, 0x0, "RW","""Clear Switch Node B Output Under Voltage Lockout Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[1]""")
        self.clear_swc_output_under_voltage_lockout_status  = pyt_reg_field("clear_swc_output_under_voltage_lockout_status", 1, 0, 0x0, "RW","""Clear Switch Node C Output Under Voltage Lockout Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[0]""")
        self.fl = [     self.clear_swa_output_current_limiter_warning_status,     self.reserved,     self.clear_swb_output_current_limiter_warning_status,     self.clear_swc_output_current_limiter_warning_status,     self.clear_swa_output_under_voltage_lockout_status,     self.reserved,     self.clear_swb_output_under_voltage_lockout_status,     self.clear_swc_output_under_voltage_lockout_status]

class R14 (pyt_reg):
    def __init__(self, name="R14", bus_hd=None, bits_w=8, addr=20, desc="""clear global""" ):
        super(R14,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      5, 3, 0x0, "-","""Reserved""")
        self.clear_vout_1p0v_output_power_good_status  = pyt_reg_field("clear_vout_1p0v_output_power_good_status", 1, 2, 0x0, "RW","""Clear VOUT_1.0V Output Power Good Status.
            1 = Clear Register Table147, ¡°Register 0x33¡±[2]""")
        self.reserved      = pyt_reg_field("reserved",      1, 1, 0x0, "-","""Reserved""")
        self.global_clear_status  = pyt_reg_field("global_clear_status", 1, 0, 0x0, "RW","""Clear all  status bits.
            1 = Clear all status bits""")
        self.fl = [     self.reserved,     self.clear_vout_1p0v_output_power_good_status,     self.reserved,     self.global_clear_status]

class R15 (pyt_reg):
    def __init__(self, name="R15", bus_hd=None, bits_w=8, addr=21, desc="""mask sw power good""" ):
        super(R15,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      2, 6, 0x0, "-","""Clear Switch Node A Output Current Limiter Warning Status.
            1 = Clear Register Table107, ¡°Register 0x0B¡±[7]""")
        self.mask_swa_output_power_good_status  = pyt_reg_field("mask_swa_output_power_good_status", 1, 5, 0x1, "RW","""Mask SWA Output Power Good Status Event. 1
            0 = Do Not Mask SWA Output Power Good Status Event
            1 = Mask SWA Output Power Good Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.mask_swb_output_power_good_status  = pyt_reg_field("mask_swb_output_power_good_status", 1, 3, 0x1, "RW","""Mask SWB Output Power Good Status Event.1,2
            0 = Do Not Mask SWB Output Power Good Status Event
            1 = Mask SWB Output Power Good Status Event""")
        self.mask_swc_output_power_good_status  = pyt_reg_field("mask_swc_output_power_good_status", 1, 2, 0x1, "RW","""Mask SWC Output Power Good Status Event.1
            0 = Do Not Mask SWC Output Power Good Status Event
            1 = Mask SWC Output Power Good Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 1, 0x0, "-","""Reserved""")
        self.mask_vin_bulk_input_over_voltage_status  = pyt_reg_field("mask_vin_bulk_input_over_voltage_status", 1, 0, 0x0, "RW","""Mask VIN_Bulk Input Supply Over Voltage Status Event.3
            0 = Do Not Mask VIN_Bulk Input Supply Over Voltage Status Event
            1 = Mask VIN_Bulk Input Supply Over Voltage Status Event""")
        self.fl = [     self.reserved,     self.mask_swa_output_power_good_status,     self.reserved,     self.mask_swb_output_power_good_status,     self.mask_swc_output_power_good_status,     self.reserved,     self.mask_vin_bulk_input_over_voltage_status]

class R16 (pyt_reg):
    def __init__(self, name="R16", bus_hd=None, bits_w=8, addr=22, desc="""clear current limit status""" ):
        super(R16,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mask_pmic_high_temp_warning_status  = pyt_reg_field("mask_pmic_high_temp_warning_status", 1, 7, 0x0, "RW","""Mask PMIC High Temperature Warning Status Event.
            0 = Do Not Mask PMIC High Temperature Warning Status Event
            1 = Mask PMIC High Temperature Warning Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""reserved""")
        self.mask_vout_1p8v_output_power_good_status  = pyt_reg_field("mask_vout_1p8v_output_power_good_status", 1, 5, 0x1, "RW","""R16 [5]: MASK_VOUT_1.8V_OUTPUT_POWER_GOOD_STATUS
            Mask VOUT_1.8V Output Power Good Status Event.
            0 = Do Not Mask 1.8V Output Power Good Status Event
            1 = Mask 1.8V Output Power Good Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.mask_swa_high_output_current_consumption_warning_status  = pyt_reg_field("mask_swa_high_output_current_consumption_warning_status", 1, 3, 0x0, "RW","""Mask Switch Node AHigh Output Current Consumption Warning Status 
            Event.
            0 = Do Not Mask Switch Node AOutput Current Consumption Warning 
            Status Event
            1 = Mask Switch Node AOutput Current Consumption Warning Status 
            Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""reserved""")
        self.mask_swb_high_output_current_consumption_warning_status  = pyt_reg_field("mask_swb_high_output_current_consumption_warning_status", 1, 1, 0x0, "RW","""Mask Switch Node BHigh Output Current Consumption Warning Status 
            Event.
            0 = Do Not Mask Switch Node BOutput Current Consumption Warning  Status Event
            1 = Mask Switch Node BOutput Current Consumption Warning Status  Event""")
        self.mask_swc_high_output_current_consumption_warning_status  = pyt_reg_field("mask_swc_high_output_current_consumption_warning_status", 1, 0, 0x0, "RW","""Mask Switch Node CHigh Output Current Consumption Warning Status 
            Event.
            0 = Do Not Mask Switch Node COutput Current Consumption Warning Status Event
            1 = Mask Switch Node COutput Current Consumption Warning Status Event""")
        self.fl = [     self.mask_pmic_high_temp_warning_status,     self.reserved,     self.mask_vout_1p8v_output_power_good_status,     self.reserved,     self.mask_swa_high_output_current_consumption_warning_status,     self.reserved,     self.mask_swb_high_output_current_consumption_warning_status,     self.mask_swc_high_output_current_consumption_warning_status]

class R17 (pyt_reg):
    def __init__(self, name="R17", bus_hd=None, bits_w=8, addr=23, desc="""mask sw ouput over voltage""" ):
        super(R17,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mask_swa_output_over_voltage_status  = pyt_reg_field("mask_swa_output_over_voltage_status", 1, 7, 0x0, "RW","""Mask Switch Node AOutput Over Voltage Status Event.
            0 = Do Not Mask Switch Node AOutput Over Voltage Status Event
            1 = Mask Switch Node AOutput Over Voltage Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""reserved""")
        self.mask_swb_output_over_voltage_status  = pyt_reg_field("mask_swb_output_over_voltage_status", 1, 5, 0x1, "RW","""Mask Switch Node BOutput Over Voltage Status Event.
            0 = Do Not Mask Switch Node BOutput Over Voltage Status Event
            1 = Mask Switch Node BOutput Over Voltage Status Event""")
        self.mask_swc_output_over_voltage_status  = pyt_reg_field("mask_swc_output_over_voltage_status", 1, 4, 0x0, "RW","""Mask Switch Node COutput Over Voltage Status Event.
            0 = Do Not Mask Switch Node COutput Over Voltage Status Event
            1 = Mask Switch Node COutput Over Voltage Status Event""")
        self.mask_pec_error_status  = pyt_reg_field("mask_pec_error_status", 1, 3, 0x0, "RW","""Mask PEC Error Event for GSI_n output Only
            0 = Do Not Mask PEC Error Status Event
            1 = Mask PEC Error Status""")
        self.mask_parity_error_status  = pyt_reg_field("mask_parity_error_status", 1, 2, 0x0, "RW","""Mask Parity Error Event for GSI_n output Only
            0 = Do Not Mask Parity Error Status Event
            1 = Mask Parity Error Status""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""reserved""")
        self.fl = [     self.mask_swa_output_over_voltage_status,     self.reserved,     self.mask_swb_output_over_voltage_status,     self.mask_swc_output_over_voltage_status,     self.mask_pec_error_status,     self.mask_parity_error_status,     self.reserved]

class R18 (pyt_reg):
    def __init__(self, name="R18", bus_hd=None, bits_w=8, addr=24, desc="""mask current warning""" ):
        super(R18,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mask_swa_output_current_limiter_warning_status  = pyt_reg_field("mask_swa_output_current_limiter_warning_status", 1, 7, 0x0, "RW","""Mask Switch Node AOutput Current Limiter Warning Status Event.
            0 = Do Not Mask Switch Node AOutput Current Limiter Warning Status   Event
            1 = Mask Switch Node AOutput Current Limiter Warning Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 6, 0x0, "-","""reserved""")
        self.mask_swb_output_current_limiter_warning_status  = pyt_reg_field("mask_swb_output_current_limiter_warning_status", 1, 5, 0x1, "RW","""Mask Switch Node B Output Current Limiter Warning Status Event.
            0 = Do Not Mask Switch Node B Output Current Limiter Warning Status Event
            1 = Mask Switch Node B Output Current Limiter Warning Status Event""")
        self.mask_swc_output_current_limiter_warning_status  = pyt_reg_field("mask_swc_output_current_limiter_warning_status", 1, 4, 0x0, "RW","""Mask Switch Node C Output Current Limiter Warning Status Event.
            0 = Do Not Mask Switch Node C Output Current Limiter Warning Status Event
            1 = Mask Switch Node C Output Current Limiter Warning Status Event""")
        self.mask_swa_output_under_voltage_lockout_status  = pyt_reg_field("mask_swa_output_under_voltage_lockout_status", 1, 3, 0x0, "RW","""Mask Switch Node AOutput Under Voltage Lockout Status Event.
            0 = Do Not Mask Switch Node AOutput Under Voltage Lockout Status Event
            1 = Mask Switch Node AOutput Under Voltage Lockout Status Event""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x0, "-","""reserved""")
        self.mask_swb_output_under_voltage_lockout_status  = pyt_reg_field("mask_swb_output_under_voltage_lockout_status", 1, 1, 0x0, "RW","""Mask Switch Node B Output Under Voltage Lockout Status Event.
            0 = Do Not Mask Switch Node B Output Under Voltage Lockout Status Event
            1 = Mask Switch Node B Output Under Voltage Lockout Status Event""")
        self.mask_swc_output_under_voltage_lockout_status  = pyt_reg_field("mask_swc_output_under_voltage_lockout_status", 1, 0, 0x0, "RW","""Mask Switch Node C Output Under Voltage Lockout Status Event.
            0 = Do Not Mask Switch Node C Output Under Voltage Lockout Status Event
            1 = Mask Switch Node C Output Under Voltage Lockout Status Event""")
        self.fl = [     self.mask_swa_output_current_limiter_warning_status,     self.reserved,     self.mask_swb_output_current_limiter_warning_status,     self.mask_swc_output_current_limiter_warning_status,     self.mask_swa_output_under_voltage_lockout_status,     self.reserved,     self.mask_swb_output_under_voltage_lockout_status,     self.mask_swc_output_under_voltage_lockout_status]

class R19 (pyt_reg):
    def __init__(self, name="R19", bus_hd=None, bits_w=8, addr=25, desc="""mask vout 1.0v""" ):
        super(R19,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      5, 3, 0x0, "-","""reserved""")
        self.mask_vout_1p0v_output_power_good_status  = pyt_reg_field("mask_vout_1p0v_output_power_good_status", 1, 2, 0x0, "RW","""Mask VOUT_1.0V Output Power Good Status Event.
            0 = Do Not Mask 1.0V Output Power Good Status Event
            1 = Mask 1.0V Output Power Good Status Event""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x1, "-","""reserved""")
        self.fl = [     self.reserved,     self.mask_vout_1p0v_output_power_good_status,     self.reserved]

class R1A (pyt_reg):
    def __init__(self, name="R1A", bus_hd=None, bits_w=8, addr=26, desc="""Threshold Registers LDO output""" ):
        super(R1A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      3, 5, 0x0, "-","""Reserved""")
        self.quiescent_state_en  = pyt_reg_field("quiescent_state_en", 1, 4, 0x0, "RW","""PMIC Quiescent State Entry Enable  (This bit must be configured before issuing VR Enable command)
            0 = Disable
            1 = Enable""")
        self.reserved      = pyt_reg_field("reserved",      1, 3, 0x1, "-","""Mask Switch Node B Output Current Limiter Warning Status Event.
            0 = Do Not Mask Switch Node B Output Current Limiter Warning Status Event
            1 = Mask Switch Node B Output Current Limiter Warning Status Event""")
        self.vout_1p8v_power_good_threshold_voltage  = pyt_reg_field("vout_1p8v_power_good_threshold_voltage", 1, 2, 0x0, "RW","""VOUT 1.8V LDO Output Threshold Voltage for Power Good Status
            0 = 1.6 V
            1 = Reserved""")
        self.output_power_select  = pyt_reg_field("output_power_select", 1, 1, 0x0, "RW","""Switch Regulator Output Power Select
            0 = Report individual power for each rail in R0C, R0E and R0F
            1 = Report total power of each rail in R0C""")
        self.vout_1p0v_power_good_threshold_voltage  = pyt_reg_field("vout_1p0v_power_good_threshold_voltage", 1, 0, 0x0, "RW","""VOUT 1.0VLDO Output Threshold Voltage for Power Good Status
            0 = -10% from the setting in Table174, ¡°Register 0x51¡±[2:1]
            1 = -15% from the setting in Table174, ¡°Register 0x51¡±[2:1]""")
        self.fl = [     self.reserved,     self.quiescent_state_en,     self.reserved,     self.vout_1p8v_power_good_threshold_voltage,     self.output_power_select,     self.vout_1p0v_power_good_threshold_voltage]

class R1B (pyt_reg):
    def __init__(self, name="R1B", bus_hd=None, bits_w=8, addr=27, desc="""Threshold Registers VIN """ ):
        super(R1B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.vin_bulk_over_voltage_threshold  = pyt_reg_field("vin_bulk_over_voltage_threshold", 1, 7, 0x0, "RW","""VIN_Bulk Input Over Voltage Threshold Setting For GSI_n Assertion
            0 = 5.8 V to 6 V (Varies across vendors)
            1 = Reserved""")
        self.current_or_power_meter_select  = pyt_reg_field("current_or_power_meter_select", 1, 6, 0x0, "RW","""PMIC Output Regulator Measurement - Current or Power Meter
            0 = Report Current Measurements in registers:
            1 = Report Power Measurements in registers""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x1, "-","""Reserved""")
        self.global_pwr_good_pin_status_mask  = pyt_reg_field("global_pwr_good_pin_status_mask", 1, 4, 0x0, "RW","""Global Mask PWR_GOOD Output Pin
            0 = Not Masked 
            1 = Masked""")
        self.gsi_n_pin_enable  = pyt_reg_field("gsi_n_pin_enable", 1, 3, 0x0, "RW","""Enable GSI_n Pin
            0 = Disable GSI_n Pin
            1 = Enable GSI_n Pin""")
        self.pmic_high_temperature_warning_threshold  = pyt_reg_field("pmic_high_temperature_warning_threshold", 3, 0, 0x5, "RW","""PMIC High Temperature Warning Threshold
            000 = Reserved
            001 = PMIC temperature >85¡ãC
            010 = PMIC temperature >95¡ãC
            011 = PMIC temperature >105¡ãC
            100 = PMIC temperature >115¡ãC
            101 = PMIC temperature >125¡ãC
            110 = PMIC temperature >135¡ãC
            111 = Reserved 
            (The tolerance of the temperature warning threshold is +5¡ãCfrom the selected setting)""")
        self.fl = [     self.vin_bulk_over_voltage_threshold,     self.current_or_power_meter_select,     self.reserved,     self.global_pwr_good_pin_status_mask,     self.gsi_n_pin_enable,     self.pmic_high_temperature_warning_threshold]

class R1C (pyt_reg):
    def __init__(self, name="R1C", bus_hd=None, bits_w=8, addr=28, desc="""SWA_OUTPUT_HIGH_CURRENT_CONSUMPTION_WARNING_THRESHOLD""" ):
        super(R1C,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_high_current_consumption_warning_threshold  = pyt_reg_field("swa_output_high_current_consumption_warning_threshold", 6, 2, 0x18, "RW","""Switch Node A Output High Current Consumption Warning Threshold
            000000 = Un-defined
            000001 = > 0.125 A
            000010 = > 0.25 A
            000011 = > 0.375 A
            000100 = > 0.5 A
            000101 = > 0.625 A 
                ...
            010111 = > 2.875 A
            011000 = > 3.0 A
            011001 = > 3.125 A
                ...
            101111 = > 5.875 A
            110000 = > 6.0 A
            110001 = > 6.125 A
                ...
            111010 = > 7.25 A 
            111011 = > 7.375 A 
            111100 = > 7.5 A 
            111101 = > 7.625 A 
            111110 = > 7.75 A 
            111111 = > 7.875 A""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.swa_output_high_current_consumption_warning_threshold,     self.reserved]

class R1E (pyt_reg):
    def __init__(self, name="R1E", bus_hd=None, bits_w=8, addr=30, desc="""SWB_OUTPUT_HIGH_CURRENT_CONSUMPTION_WARNING_THRESHOLD""" ):
        super(R1E,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swb_output_high_current_consumption_warning_threshold  = pyt_reg_field("swb_output_high_current_consumption_warning_threshold", 6, 2, 0x18, "RW","""Switch Node B Output High Current Consumption Warning Threshold
            000000 = Un-defined
            000001 = > 0.125 A
            000010 = > 0.25 A
            000011 = > 0.375 A
            000100 = > 0.5 A
            000101 = > 0.625 A
                ...
            010111 = > 2.875 A
            011000 = > 3.0 A
            011001 = > 3.125 A
                ...
            101111 = > 5.875 A
            110000 = > 6.0 A
            110001 = > 6.125 A
                ...
            111010 = > 7.25 A 
            111011 = > 7.375 A 
            111100 = > 7.5 A 
            111101 = > 7.625 A 
            111110 = > 7.75 A 
            111111 = > 7.875 A""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.swb_output_high_current_consumption_warning_threshold,     self.reserved]

class R1F (pyt_reg):
    def __init__(self, name="R1F", bus_hd=None, bits_w=8, addr=31, desc="""SWC_OUTPUT_HIGH_CURRENT_CONSUMPTION_WARNING_THRESHOLD""" ):
        super(R1F,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swc_output_high_current_consumption_warning_threshold  = pyt_reg_field("swc_output_high_current_consumption_warning_threshold", 6, 2, 0x18, "RW","""Switch Node C Output High Current Consumption Warning Threshold
            000000 = Un-defined
            000001 = > 0.125 A
            000010 = > 0.25 A
            000011 = > 0.375 A
            000100 = > 0.5 A or
            000101 = > 0.625 A
            000110 = > 0.75 A
            000111 = > 0.875 A
            001000 = > 1.0 A
            001001 = > 1.125 A
                ...
            001111 => 1.875
            010000 => 2.0 A
            010001 => 2.125A
                ...
            010111 = > 2.875 A
            011000 = > 3.0 A
            011001 = > 3.125 A
                ...
            110111 = > 6.875 A 
            111000 = > 7.0 A 
            111001 = > 7.125 A 
            111010 = > 7.25 A 
            111011 = > 7.375 A 
            111100 = > 7.5 A 
            111101 = > 7.625 A 
            111110 = > 7.75 A 
            111111 = > 7.875 A""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.swc_output_high_current_consumption_warning_threshold,     self.reserved]

class R20 (pyt_reg):
    def __init__(self, name="R20", bus_hd=None, bits_w=8, addr=32, desc="""Threshold Registers sw current""" ):
        super(R20,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_current_limiter_warning_threshold_setting  = pyt_reg_field("swa_output_current_limiter_warning_threshold_setting", 2, 6, 0x1, "RW","""For COT Mode, Ivalley_limit:
        (no use PMIC5100:
            00 = 3.0 A
            01 = 3.5 A
            10 = 4.0 A
            11 = Reserved)
        PMIC5120:
            00 = 4.5 A
            01 = 5.5 A
            10 = 6.5A
            11 = 7.5A""")
        self.reserved      = pyt_reg_field("reserved",      2, 4, 0x0, "-","""Reserved""")
        self.swb_output_current_limiter_warning_threshold_setting  = pyt_reg_field("swb_output_current_limiter_warning_threshold_setting", 2, 2, 0x1, "RW","""For COT Mode, Ivalley_limit
            (no use PMIC5100:
            00 = 3.0 A
            01 = 3.5 A
            10 = 4.0 A
            11 = Reserved)
            PMIC5120:
            00 = 4.5 A
            01 = 5.5 A
            10 = 6.5 A
            11 = 7.5A""")
        self.swc_output_current_limiter_warning_threshold_setting  = pyt_reg_field("swc_output_current_limiter_warning_threshold_setting", 2, 0, 0x0, "RW","""For COT Mode, Ivalley_limit:
            (no use PMIC5100:
            00 = 0.5 A
            01 = 1.0 A
            10 = Reserved
            11 = Reserved)
            PMIC5120:
            00 = 1.5 A
            01 = 2.0 A
            10 = Reserved
            11 = Reserved""")
        self.fl = [     self.swa_output_current_limiter_warning_threshold_setting,     self.reserved,     self.swb_output_current_limiter_warning_threshold_setting,     self.swc_output_current_limiter_warning_threshold_setting]

class R21 (pyt_reg):
    def __init__(self, name="R21", bus_hd=None, bits_w=8, addr=33, desc="""SWA_VOLTAGE_SETTING""" ):
        super(R21,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_voltage_setting  = pyt_reg_field("swa_voltage_setting", 7, 1, 0x1, "RW","""Switch Node AOutput Regulator Voltage Setting
            (After VR is enabled, the host may update this register to any new setting that it may desire. However to prevent false error
            trigger, the PMIC internally will increment the SWA output voltage setting by 5 mV at a time. The time it takes for PMIC
            to adjust the output voltage is 5 ¦Ìs for each 5 mV increment. The host must wait sufficient time for PMIC to adjust to final
            value. As an example, if host adjusts the output voltage by 50 mV from the original value, the host must wait minimum of
            50 ¦Ìs before PMIC can guarantee the new output voltage. During this time, PMIC masks the PWR_GOOD output signal
            assertion to prevent any artificial error due to the crossing of the output voltage threshold setting. However, PMIC does
            assert PWR_GOOD output signal if there is any abnormal issues that triggers VR Disable command as described in
            Table36. Further, PMIC does monitor PWR_GOOD input signal and executes power off config sequence registers if it is
            registered low when Table146, ¡°Register 0x32¡±[5] = ¡®1¡¯.) 
            000 0000 = 800 mV
            000 0001 = 805 mV
            000 0010 = 810 mV
            ...
            011 1100 = 1100 mV
            ...
            111 1101 = 1425 mV
            111 1110 = 1430 mV
            111 1111 = 1435 mV""")
        self.swa_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("swa_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node AOutput Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            1 = -7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]""")
        self.fl = [     self.swa_voltage_setting,     self.swa_power_good_threshold_low_side_voltage_setting]

class R22 (pyt_reg):
    def __init__(self, name="R22", bus_hd=None, bits_w=8, addr=34, desc="""SWA_OVER_VOLTAGE_THRESHOLD""" ):
        super(R22,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("swa_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node AOutput Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = +7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 = +10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            11 = Reserved""")
        self.swa_over_voltage_threshold_setting  = pyt_reg_field("swa_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node AOutput Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = +10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 =+12.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            11 = Reserved""")
        self.swa_under_voltage_lockout_threshold_setting  = pyt_reg_field("swa_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node AOutput Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = -12.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.swa_output_soft_stop_time  = pyt_reg_field("swa_output_soft_stop_time", 2, 0, 0x3, "RW","""Switch Node AOutput Regulator Soft Stop Time After VR Disable
            no use PMIC5100:
            00 = 0.5 ms
            01 = 1 ms
            10 = 2 ms
            11 = 4 ms
            PMIC5120:
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.swa_power_good_threshold_high_side_voltage_setting,     self.swa_over_voltage_threshold_setting,     self.swa_under_voltage_lockout_threshold_setting,     self.swa_output_soft_stop_time]

class R25 (pyt_reg):
    def __init__(self, name="R25", bus_hd=None, bits_w=8, addr=37, desc="""SWB_VOLTAGE_SETTING""" ):
        super(R25,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swb_voltage_setting  = pyt_reg_field("swb_voltage_setting", 7, 1, 0x3c, "RW","""Switch Node B Output Regulator Voltage Setting
            000 0000 = 800 mV
            000 0001 = 805 mV
            000 0010 = 810 mV
            ...
            011 1100 = 1100 mV
            ...
            111 1101 = 1425 mV
            111 1110 = 1430 mV
            111 1111 = 1435 mV""")
        self.swb_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("swb_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node B Output Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            1 = -7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]""")
        self.fl = [     self.swb_voltage_setting,     self.swb_power_good_threshold_low_side_voltage_setting]

class R26 (pyt_reg):
    def __init__(self, name="R26", bus_hd=None, bits_w=8, addr=38, desc="""SWB_OVER_VOLTAGE_THRESHOLD""" ):
        super(R26,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swb_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("swb_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node B Output Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = +7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 = +10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            11 = Reserved""")
        self.swb_over_voltage_threshold_setting  = pyt_reg_field("swb_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node B Output Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = +10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 =+12.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            11 = Reserved""")
        self.swb_under_voltage_lockout_threshold_setting  = pyt_reg_field("swb_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node B Output Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = -12.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.swb_output_soft_stop_time  = pyt_reg_field("swb_output_soft_stop_time", 2, 0, 0x3, "RW","""SWB Output Regulator Soft Stop Time After VR Disable 
            PMIC5100:
            00 = 0.5 ms
            01 = 1 ms
            10 = 2 ms
            11 = 4 ms
            PMIC5120:
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.swb_power_good_threshold_high_side_voltage_setting,     self.swb_over_voltage_threshold_setting,     self.swb_under_voltage_lockout_threshold_setting,     self.swb_output_soft_stop_time]

class R27 (pyt_reg):
    def __init__(self, name="R27", bus_hd=None, bits_w=8, addr=39, desc="""SWC_VOLTAGE_SETTING""" ):
        super(R27,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swc_voltage_setting  = pyt_reg_field("swc_voltage_setting", 7, 1, 0x3c, "RW","""Switch Node C Output Regulator Voltage Setting
            000 0000 = 1500 mV
            000 0001 = 1505 mV
            000 0010 = 1510 mV
            ...
            011 1100 = 1800 mV
            ...
            111 1101 = 2125 mV
            111 1110 = 2130 mV
            111 1111 = 2135 mV""")
        self.swc_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("swc_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node C Output Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            1 = -7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]""")
        self.fl = [     self.swc_voltage_setting,     self.swc_power_good_threshold_low_side_voltage_setting]

class R28 (pyt_reg):
    def __init__(self, name="R28", bus_hd=None, bits_w=8, addr=40, desc="""SWC_OVER_VOLTAGE_THRESHOLD (copy from R4C)""" ):
        super(R28,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swc_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("swc_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node C Output Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = +7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = +10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            11 = Reserved""")
        self.swc_over_voltage_threshold_setting  = pyt_reg_field("swc_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node C Output Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = +10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = +12.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            11 = Reserved""")
        self.swc_under_voltage_lockout_threshold_setting  = pyt_reg_field("swc_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node C Output Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = -12.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.swc_output_soft_stop_time  = pyt_reg_field("swc_output_soft_stop_time", 2, 0, 0x3, "RW","""SWC Output Regulator Soft Stop Time After VR Disable
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.swc_power_good_threshold_high_side_voltage_setting,     self.swc_over_voltage_threshold_setting,     self.swc_under_voltage_lockout_threshold_setting,     self.swc_output_soft_stop_time]

class R29 (pyt_reg):
    def __init__(self, name="R29", bus_hd=None, bits_w=8, addr=41, desc="""SWA MODE (copy from R4D)""" ):
        super(R29,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_mode_select  = pyt_reg_field("swa_mode_select", 2, 6, 0x2, "RW","""Switch Node AOutput Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)""")
        self.swa_switching_freq  = pyt_reg_field("swa_switching_freq", 2, 4, 0x0, "RW","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.reserved      = pyt_reg_field("reserved",      4, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.swa_mode_select,     self.swa_switching_freq,     self.reserved]

class R2A (pyt_reg):
    def __init__(self, name="R2A", bus_hd=None, bits_w=8, addr=42, desc="""SWBC MODE (copy from R4E , 0x2a+0x24 = 0x4E)  """ ):
        super(R2A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swb_mode_select  = pyt_reg_field("swb_mode_select", 2, 6, 0x2, "RW","""Switch Node AOutput Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)""")
        self.swb_switching_freq  = pyt_reg_field("swb_switching_freq", 2, 4, 0x0, "RW","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.swc_mode_select  = pyt_reg_field("swc_mode_select", 2, 2, 0x2, "RW","""Switch Node C Output Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)
            1:0 RW 01
R2A [1:0]: SWC_SWITCHING_FREQ""")
        self.swc_switching_freq  = pyt_reg_field("swc_switching_freq", 2, 0, 0x1, "RW","""Switch Node C Output Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.fl = [     self.swb_mode_select,     self.swb_switching_freq,     self.swc_mode_select,     self.swc_switching_freq]

class R2B (pyt_reg):
    def __init__(self, name="R2B", bus_hd=None, bits_w=8, addr=43, desc="""VOUT_LDO_VOLTAGE_SETTING (copy from R51 , 0x2a+0x26 = 0x51)  """ ):
        super(R2B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.vout_1p8v_voltage_setting  = pyt_reg_field("vout_1p8v_voltage_setting", 2, 6, 0x1, "RW","""VOUT 1.8 V LDO Output Voltage Setting
            00 = 1.7 V
            01 = 1.8 V
            10 = 1.9 V
            11 = 2.0 V""")
        self.reserved      = pyt_reg_field("reserved",      3, 3, 0x0, "-","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.vout_1p0v_voltage_setting  = pyt_reg_field("vout_1p0v_voltage_setting", 2, 1, 0x1, "RW","""VOUT 1.0VLDO Voltage Setting
            00 = 0.9 V
            01 = 1.0 V
            10 = 1.1 V
            11 = 1.2 V""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x1, "-","""Switch Node C Output Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.fl = [     self.vout_1p8v_voltage_setting,     self.reserved,     self.vout_1p0v_voltage_setting,     self.reserved]

class R2C (pyt_reg):
    def __init__(self, name="R2C", bus_hd=None, bits_w=8, addr=44, desc="""SWA_OUTPUT_SOFT_START_TIME (copy from 0x5D)""" ):
        super(R2C,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swa_output_soft_start_time  = pyt_reg_field("swa_output_soft_start_time", 3, 5, 0x2, "RW","""SWA Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      5, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.swa_output_soft_start_time,     self.reserved]

class R2D (pyt_reg):
    def __init__(self, name="R2D", bus_hd=None, bits_w=8, addr=45, desc="""SWBC_OUTPUT_SOFT_START_TIME (copy from R5E)  """ ):
        super(R2D,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.swb_output_soft_start_time  = pyt_reg_field("swb_output_soft_start_time", 3, 5, 0x1, "RW","""SWB Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.swc_output_soft_start_time  = pyt_reg_field("swc_output_soft_start_time", 3, 1, 0x1, "RW","""SWC Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x1, "-","""Reserved""")
        self.fl = [     self.swb_output_soft_start_time,     self.reserved,     self.swc_output_soft_start_time,     self.reserved]

class R2E (pyt_reg):
    def __init__(self, name="R2E", bus_hd=None, bits_w=8, addr=46, desc="""PMIC_SHUTDOWN_TEMPERATURE_THRESHOLD """ ):
        super(R2E,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      5, 3, 0x1, "-","""Reserved""")
        self.pmic_shutdown_temperature_threshold  = pyt_reg_field("pmic_shutdown_temperature_threshold", 3, 0, 0x4, "RW","""PMIC Shutdown Temperature Threshold
            000 = PMIC Temperature >105¡ãC
            001 = PMIC Temperature >115¡ãC
            010 = PMIC Temperature >125¡ãC
            011 = PMIC Temperature >135¡ãC
            100 = PMIC Temperature >145¡ãC
            101 = Reserved
            110 = Reserved
            111 = Reserved""")
        self.fl = [     self.reserved,     self.pmic_shutdown_temperature_threshold]

class R2F (pyt_reg):
    def __init__(self, name="R2F", bus_hd=None, bits_w=8, addr=47, desc=""" SWA_REGULATOR_CONTROL""" ):
        super(R2F,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      1, 7, 0x1, "-","""Reserved""")
        self.swa_regulator_control  = pyt_reg_field("swa_regulator_control", 1, 6, 0x0, "RW","""Disable SWA Regulator Output
            0 = Disable Switch Node A Output Regulator
            1 = Enable Switch Node A Output Regulato""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x1, "-","""Reserved""")
        self.swb_regulator_control  = pyt_reg_field("swb_regulator_control", 1, 4, 0x1, "RW","""Disable SWB Regulator Output
            0 = Disable Switch Node B Output Regulator
            1 = Enable Switch Node B Output Regulator""")
        self.swc_regulator_control  = pyt_reg_field("swc_regulator_control", 1, 3, 0x0, "RW","""Disable SWC Regulator Output
            0 = Disable Switch Node C Output Regulator
            1 = Enable Switch Node C Output Regulator""")
        self.secure_mode   = pyt_reg_field("secure_mode",   1, 2, 0x1, "RW","""PMIC Mode Operation
            0 = Secure Mode Operation
            1 = Programmable Mode Operation""")
        self.mask_bits_register_control  = pyt_reg_field("mask_bits_register_control", 2, 0, 0x1, "RW","""Mask Bits Register Control
            00 = Mask GSI_n Signal Only (PWR_GOOD Signal will assert)
            01 = Mask PWR_GOOD Signal Only (GSI_n Signal will assert)
            10 = Mask GSI_n and PWR_GOOD Signals (neither PWR_GOOD assert or 
            GSI_n signal will assert)
            11 = Reserved""")
        self.fl = [     self.reserved,     self.swa_regulator_control,     self.reserved,     self.swb_regulator_control,     self.swc_regulator_control,     self.secure_mode,     self.mask_bits_register_control]

class R30 (pyt_reg):
    def __init__(self, name="R30", bus_hd=None, bits_w=8, addr=48, desc="""ADC SETTING""" ):
        super(R30,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.adc_enable    = pyt_reg_field("adc_enable",    1, 7, 0x1, "RW","""Enable ADC (Analog to Digital Conversion)
            0 = Disable
            1 = Enable""")
        self.adc_select    = pyt_reg_field("adc_select",    4, 3, 0x0, "RW","""Input Selection for ADC Readout
            0000 = SWA Output Voltage
            0001 = Reserved
            0010 = SWB Output Voltage
            0011 = SWC Output Voltage
            0100 = Reserved
            0101 = VIN_Bulk Input Voltage
            0110 = Reserved
            0111 = Reserved
            1000 = VOUT_1.8V Output Voltage
            1001 = VOUT_1.0VOutput Voltage
            All other encodings are reserved.""")
        self.reserved      = pyt_reg_field("reserved",      1, 2, 0x1, "-","""Reserved""")
        self.adc_register_update_frequency  = pyt_reg_field("adc_register_update_frequency", 2, 0, 0x1, "RW","""ADC Current or Power Measurement Update Frequency
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.adc_enable,     self.adc_select,     self.reserved,     self.adc_register_update_frequency]

class R31 (pyt_reg):
    def __init__(self, name="R31", bus_hd=None, bits_w=8, addr=49, desc="""ADC DATA""" ):
        super(R31,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.adc_read      = pyt_reg_field("adc_read",      8, 0, 0x0, "RW","""ADC_READ
            ADC Output Voltage Reading
            (Applies to SW[A:C], VOUT_1.8V, 
            VOUT_1.0V)
            0000 0000 = Undefined
            0000 0001 = 15 mV
            0000 0010 = 30 mV
            ...
            1111 1111 ¡Ý3825 mV
            ADC Output Voltage Reading
            2
            (Applies to VIN_Bulk Input Voltage)
            0000 0000 = Undefined
            0000 0001 = 70 mV
            0000 0010 = 140 mV
            ...
            1111 1111 ¡Ý17850 mV""")
        self.fl = [     self.adc_read]

class R32 (pyt_reg):
    def __init__(self, name="R32", bus_hd=None, bits_w=8, addr=50, desc="""VR CONTROL""" ):
        super(R32,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.vr_enable     = pyt_reg_field("vr_enable",     1, 7, 0x0, "RW","""PMIC Enable
            0 = PMIC Disable
            1 = PMIC Enable""")
        self.management_interface_selection  = pyt_reg_field("management_interface_selection", 1, 6, 0x0, "RO","""
            PMIC Management Bus Interface Protocol Selection
            0 = I2C Protocol (Max speed 1 MHz)
            1 = I3C Basic Protocol""")
        self.pwr_good_io_type  = pyt_reg_field("pwr_good_io_type", 1, 5, 0x0, "RW","""
            PMIC PWR_GOOD Output Signal Type
            0 = Output Only
            1 = Input and Output""")
        self.pwr_good_output_signal_control  = pyt_reg_field("pwr_good_output_signal_control", 2, 3, 0x0, "RW","""PMIC PWR_GOOD Output Signal Control
            0x = PMIC controls PWR_GOOD on its own based on internal status
            10 = PWR_GOOD Output Low
            11 = PWR_GOOD Output Floats""")
        self.reserved      = pyt_reg_field("reserved",      3, 0, 0x0, "-","""reserved""")
        self.fl = [     self.vr_enable,     self.management_interface_selection,     self.pwr_good_io_type,     self.pwr_good_output_signal_control,     self.reserved]

class R33 (pyt_reg):
    def __init__(self, name="R33", bus_hd=None, bits_w=8, addr=51, desc="""TEMP MEASURE""" ):
        super(R33,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.temperature_measurement  = pyt_reg_field("temperature_measurement", 3, 5, 0x0, "RO","""PMIC Temperature
            000 <85¡ãC
            001 = 85¡ãC
            010 = 95¡ãC
            011 = 105¡ãC
            100 = 115¡ãC
            101 = 125¡ãC
            110 = 135¡ãC
            111 ¡Ý140¡ãC""")
        self.reserved      = pyt_reg_field("reserved",      2, 3, 0x0, "-","""reserved""")
        self.vout_1p0v_output_power_good_status  = pyt_reg_field("vout_1p0v_output_power_good_status", 1, 2, 0x0, "RO","""VOUT_1.0VLDO Output Power Good Status
            0 = Power Good
            1 = Power Not Good""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""reserved""")
        self.fl = [     self.temperature_measurement,     self.reserved,     self.vout_1p0v_output_power_good_status,     self.reserved]

class R34 (pyt_reg):
    def __init__(self, name="R34", bus_hd=None, bits_w=8, addr=52, desc="""BUS STATUS""" ):
        super(R34,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.pec_enable    = pyt_reg_field("pec_enable",    1, 7, 0x0, "RO","""Packet Error Code Enable  (Applicable Only if Table146, ¡°Register 0x32¡± [6] = ¡®1¡¯) 
            0 = Disable
            1 = Enable""")
        self.ibi_enable    = pyt_reg_field("ibi_enable",    1, 6, 0x0, "RO","""In Band Interrupt Enable (Applicable Only if Table146, ¡°Register 0x32¡±[6] = ¡®1¡¯)
            0 = Disable
            1 = Enable""")
        self.parity_disable  = pyt_reg_field("parity_disable", 1, 5, 0x0, "RO","""T Bit Parity Code Disable(Applicable Only if Table146, ¡°Register 0x32¡±[6] = ¡®1¡¯.)
            0 = Enable
            1 = Disable""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""reserved""")
        self.hid_code      = pyt_reg_field("hid_code",      3, 1, 0x7, "RO","""PMIC¡¯s 3-bit HID Code
            000
            001
            010
            011
            100
            101
            110
            111""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x0, "-","""reserved""")
        self.fl = [     self.pec_enable,     self.ibi_enable,     self.parity_disable,     self.reserved,     self.hid_code,     self.reserved]

class R35 (pyt_reg):
    def __init__(self, name="R35", bus_hd=None, bits_w=8, addr=53, desc="""Error injection""" ):
        super(R35,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.error_injection_enable  = pyt_reg_field("error_injection_enable", 1, 7, 0x0, "RW","""Error Injection Enable
            0 = Disable
            1 = Enable""")
        self.error_injection_rail_selection  = pyt_reg_field("error_injection_rail_selection", 3, 4, 0x0, "RW","""Error Injection - Input Rail and Output Rail Selection
            000 = Undefined
            001 = SWA Output Only
            010 = Reserved
            011 = SWB Output Only
            100 =SWC Output Only
            101 = VIN_Bulk Input Only
            110 = Reserved
            111 = Do Not Use""")
        self.over_voltage_under_voltage_select  = pyt_reg_field("over_voltage_under_voltage_select", 1, 3, 0x0, "RW","""Over Voltage or Under Voltage Selection for Bits [6:4]
            0 = Over Voltage
            1 = Under Voltage""")
        self.misc_error_injection_type  = pyt_reg_field("misc_error_injection_type", 3, 0, 0x0, "RW","""Miscellaneous Error Injection Type
            000 = Undefined
            001 = Reserved
            010 = Critical Temperature Shutdown
            011 = High Temperature Warning Threshold
            100 = VOUT_1.8V LDO Power Good
            101 = High Current Consumption Warning
            110 = Reserved
            111 = Current Limiter Warning""")
        self.fl = [     self.error_injection_enable,     self.error_injection_rail_selection,     self.over_voltage_under_voltage_select,     self.misc_error_injection_type]

class R37 (pyt_reg):
    def __init__(self, name="R37", bus_hd=None, bits_w=8, addr=55, desc="""DIMM_PASSWORD_L""" ):
        super(R37,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.dimm_vendor_memory_region_password_lower_byte  = pyt_reg_field("dimm_vendor_memory_region_password_lower_byte", 8, 0, 0x0, "RW","""DIMM Vendor Memory Region (0x40 - 0x6F) Password - Lower Byte
            [7:0] = Code""")
        self.fl = [     self.dimm_vendor_memory_region_password_lower_byte]

class R38 (pyt_reg):
    def __init__(self, name="R38", bus_hd=None, bits_w=8, addr=56, desc="""DIMM_PASSWORD_H""" ):
        super(R38,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.dimm_vendor_memory_region_password_upper_byte  = pyt_reg_field("dimm_vendor_memory_region_password_upper_byte", 8, 0, 0x0, "RW","""DIMM Vendor Memory Region (0x40 - 0x6F) Password - Upper Byte
            [7:0] = Code""")
        self.fl = [     self.dimm_vendor_memory_region_password_upper_byte]

class R39 (pyt_reg):
    def __init__(self, name="R39", bus_hd=None, bits_w=8, addr=57, desc="""Host_Region_Codes""" ):
        super(R39,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.host_region_codes  = pyt_reg_field("host_region_codes", 8, 0, 0x0, "RW","""0x74: Clear Registers R04 to R07, Erase MTP memory for R04 Register.
            DIMM Vendor Region (0x40 to 0x6F) Write Codes:
            0x40: Unlock DIMM Vendor Region. Password needs to be present in R37 
            and R38 registers.
            0x00: Lock DIMM Vendor Region.
            0x80: Burn DIMM Vendor Region Password. New password needs to be 
            present in R37 and R38.
            0x81: Burn DIMM Vendor Region - 0x40 to 0x4F
            0x82: Burn DIMM Vendor Region - 0x50 to 0x5F
            0x85: Burn DIMM Vendor Region - 0x60 to 0x6F
            DIMM Vendor Region (0x40 to 0x6F) Read Codes:
            0x5A: Burning is complete in DIMM Vendor region.""")
        self.fl = [     self.host_region_codes]

class R3A (pyt_reg):
    def __init__(self, name="R3A", bus_hd=None, bits_w=8, addr=58, desc="""DEFAULT_READ_ADDRESS_POINTER""" ):
        super(R3A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      1, 7, 0x0, "-","""Error Injection Enable
            0 = Disable
            1 = Enable""")
        self.default_read_address_pointer_enable  = pyt_reg_field("default_read_address_pointer_enable", 1, 6, 0x0, "RW","""Enable Default Address Read Pointer when PMIC sees STOP operation
            0 = Disable Default Address Pointer (address pointer is set by Host)
            1 = Enable Default Address Pointer; Address selected by register bits [5:4]""")
        self.default_read_starting_address  = pyt_reg_field("default_read_starting_address", 2, 4, 0x0, "RW","""Default Read Address Pointer Selection when PMIC sees STOP operation
            00 = R08
            01 = R0C
            10 = Reserved
            11 = Reserved""")
        self.burst_length_for_read_default_addr_pointer  = pyt_reg_field("burst_length_for_read_default_addr_pointer", 2, 2, 0x0, "RW","""Burst Length (# of Bytes) to be transferred for Read Default Address Pointer Mode5
            00 = 2 Bytes
            01 = 4 Bytes
            10 = Reserved
            11 = 16 Bytes""")
        self.reserved      = pyt_reg_field("reserved",      2, 0, 0x0, "-","""reserved""")
        self.fl = [     self.reserved,     self.default_read_address_pointer_enable,     self.default_read_starting_address,     self.burst_length_for_read_default_addr_pointer,     self.reserved]

class R3B (pyt_reg):
    def __init__(self, name="R3B", bus_hd=None, bits_w=8, addr=59, desc="""REVISION_ID_MAJOR_STEPPING""" ):
        super(R3B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      2, 6, 0x0, "-","""Reserved""")
        self.revision_id_major_stepping  = pyt_reg_field("revision_id_major_stepping", 2, 4, 0x0, "RO","""Major Revision Stepping
            00 = Revision 1
            01 = Revision 2
            10 = Revision 3
            11 = Revision 4""")
        self.revision_id_minor_stepping  = pyt_reg_field("revision_id_minor_stepping", 3, 1, 0x0, "RO","""Minor Revision Stepping
            000 = Revision 0
            001 = Revision 1
            010 = Revision 2
            011 = Revision 3
            All other encodings are reserved.""")
        self.pmic_part_capability  = pyt_reg_field("pmic_part_capability", 1, 0, 0x1, "RO","""PMIC Current Capability.
            0 = Gen 1 (Low Current)
            1 = Gen 2 (High Current)""")
        self.fl = [     self.reserved,     self.revision_id_major_stepping,     self.revision_id_minor_stepping,     self.pmic_part_capability]

class R3C (pyt_reg):
    def __init__(self, name="R3C", bus_hd=None, bits_w=8, addr=60, desc="""VENDOR_ID_BYTE0""" ):
        super(R3C,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.vendor_id_byte0  = pyt_reg_field("vendor_id_byte0", 8, 0, 0x0, "RO","""Vendor Identification Register Byte 0.""")
        self.fl = [     self.vendor_id_byte0]

class R3D (pyt_reg):
    def __init__(self, name="R3D", bus_hd=None, bits_w=8, addr=61, desc="""VENDOR_ID_BYTE1""" ):
        super(R3D,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.vendor_id_byte1  = pyt_reg_field("vendor_id_byte1", 8, 0, 0x0, "RO","""Vendor Identification Register Byte 1.""")
        self.fl = [     self.vendor_id_byte1]

class R40 (pyt_reg):
    def __init__(self, name="R40", bus_hd=None, bits_w=8, addr=64, desc="""power on sequence0""" ):
        super(R40,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_on_sequence_config0  = pyt_reg_field("power_on_sequence_config0", 1, 7, 0x0, "RW","""PMIC Power On Sequence Config 0
            0 = Do Not Execute Config 0
            1 = Execute Config 0""")
        self.power_on_sequence_config0_swa_enable  = pyt_reg_field("power_on_sequence_config0_swa_enable", 1, 6, 0x0, "RW","""Enable Switch Node AOutput Regulator.
            0 = Disable Switch Node AOutput Regulator
            1 = Enable Switch Node AOutput Regulator""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_on_sequence_config0_swb_enable  = pyt_reg_field("power_on_sequence_config0_swb_enable", 1, 4, 0x1, "RW","""Enable Switch Node BOutput Regulator.
            0 = Disable Switch Node BOutput Regulator
            1 = Enable Switch Node BOutput Regulator""")
        self.power_on_sequence_config0_swc_enable  = pyt_reg_field("power_on_sequence_config0_swc_enable", 1, 3, 0x0, "RW","""Enable Switch Node COutput Regulator.
            0 = Disable Switch Node COutput Regulator
            1 = Enable Switch Node COutput Regulator""")
        self.power_on_sequence_config0_idle  = pyt_reg_field("power_on_sequence_config0_idle", 3, 0, 0x1, "RW","""Idle time after Power On Sequence Config 0
            000 = 0 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            100 = 8 ms
            101 = 10 ms
            110 = 12 ms
            111 = 24 ms""")
        self.fl = [     self.power_on_sequence_config0,     self.power_on_sequence_config0_swa_enable,     self.reserved,     self.power_on_sequence_config0_swb_enable,     self.power_on_sequence_config0_swc_enable,     self.power_on_sequence_config0_idle]

class R41 (pyt_reg):
    def __init__(self, name="R41", bus_hd=None, bits_w=8, addr=65, desc="""power on sequence1""" ):
        super(R41,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_on_sequence_config1  = pyt_reg_field("power_on_sequence_config1", 1, 7, 0x0, "RW","""PMIC Power On Sequence Config 1
            0 = Do Not Execute Config 1
            1 = Execute Config 1""")
        self.power_on_sequence_config1_swa_enable  = pyt_reg_field("power_on_sequence_config1_swa_enable", 1, 6, 0x0, "RW","""Enable Switch Node AOutput Regulator.
            0 = Disable Switch Node AOutput Regulator
            1 = Enable Switch Node AOutput Regulator""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_on_sequence_config1_swb_enable  = pyt_reg_field("power_on_sequence_config1_swb_enable", 1, 4, 0x1, "RW","""Enable Switch Node BOutput Regulator.
            0 = Disable Switch Node BOutput Regulator
            1 = Enable Switch Node BOutput Regulator""")
        self.power_on_sequence_config1_swc_enable  = pyt_reg_field("power_on_sequence_config1_swc_enable", 1, 3, 0x0, "RW","""Enable Switch Node COutput Regulator.
            0 = Disable Switch Node COutput Regulator
            1 = Enable Switch Node COutput Regulator""")
        self.power_on_sequence_config1_idle  = pyt_reg_field("power_on_sequence_config1_idle", 3, 0, 0x1, "RW","""Idle time after Power On Sequence Config 1
            000 = 0 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            100 = 8 ms
            101 = 10 ms
            110 = 12 ms
            111 = 24 ms""")
        self.fl = [     self.power_on_sequence_config1,     self.power_on_sequence_config1_swa_enable,     self.reserved,     self.power_on_sequence_config1_swb_enable,     self.power_on_sequence_config1_swc_enable,     self.power_on_sequence_config1_idle]

class R42 (pyt_reg):
    def __init__(self, name="R42", bus_hd=None, bits_w=8, addr=66, desc="""power on sequence2""" ):
        super(R42,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_on_sequence_config2  = pyt_reg_field("power_on_sequence_config2", 1, 7, 0x0, "RW","""PMIC Power On Sequence Config 2
            0 = Do Not Execute Config 2
            1 = Execute Config 2""")
        self.power_on_sequence_config2_swa_enable  = pyt_reg_field("power_on_sequence_config2_swa_enable", 1, 6, 0x0, "RW","""Enable Switch Node AOutput Regulator.
            0 = Disable Switch Node AOutput Regulator
            1 = Enable Switch Node AOutput Regulator""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_on_sequence_config2_swb_enable  = pyt_reg_field("power_on_sequence_config2_swb_enable", 1, 4, 0x1, "RW","""Enable Switch Node BOutput Regulator.
            0 = Disable Switch Node BOutput Regulator
            1 = Enable Switch Node BOutput Regulator""")
        self.power_on_sequence_config2_swc_enable  = pyt_reg_field("power_on_sequence_config2_swc_enable", 1, 3, 0x0, "RW","""Enable Switch Node COutput Regulator.
            0 = Disable Switch Node COutput Regulator
            1 = Enable Switch Node COutput Regulator""")
        self.power_on_sequence_config2_idle  = pyt_reg_field("power_on_sequence_config2_idle", 3, 0, 0x1, "RW","""Idle time after Power On Sequence Config 2
            000 = 0 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            100 = 8 ms
            101 = 10 ms
            110 = 12 ms
            111 = 24 ms""")
        self.fl = [     self.power_on_sequence_config2,     self.power_on_sequence_config2_swa_enable,     self.reserved,     self.power_on_sequence_config2_swb_enable,     self.power_on_sequence_config2_swc_enable,     self.power_on_sequence_config2_idle]

class R45 (pyt_reg):
    def __init__(self, name="R45", bus_hd=None, bits_w=8, addr=69, desc="""MTP_SWA_VOLTAGE_SETTING""" ):
        super(R45,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swa_voltage_setting  = pyt_reg_field("mtp_swa_voltage_setting", 7, 1, 0x3c, "RW","""Switch Node AOutput Regulator Voltage Setting
            000 0000 = 800 mV
            000 0001 = 805 mV
            000 0010 = 810 mV
            ...
            011 1100 = 1100 mV
            ...
            111 1101 = 1425 mV
            111 1110 = 1430 mV
            111 1111 = 1435 mV""")
        self.mtp_swa_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("mtp_swa_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node AOutput Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            1 = -7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]""")
        self.fl = [     self.mtp_swa_voltage_setting,     self.mtp_swa_power_good_threshold_low_side_voltage_setting]

class R46 (pyt_reg):
    def __init__(self, name="R46", bus_hd=None, bits_w=8, addr=70, desc="""MTP_SWA_OVER_VOLTAGE_THRESHOLD""" ):
        super(R46,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swa_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("mtp_swa_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node AOutput Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = +7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 = +10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            11 = Reserved""")
        self.mtp_swa_over_voltage_threshold_setting  = pyt_reg_field("mtp_swa_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node AOutput Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = +10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 =+12.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            11 = Reserved""")
        self.mtp_swa_under_voltage_lockout_threshold_setting  = pyt_reg_field("mtp_swa_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node AOutput Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            01 = -12.5% from the setting in Table129, ¡°Register 0x21,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.mtp_swa_output_soft_stop_time  = pyt_reg_field("mtp_swa_output_soft_stop_time", 2, 0, 0x3, "RW","""Switch Node AOutput Regulator Soft Stop Time After VR Disable
            no use PMIC5100:
            00 = 0.5 ms
            01 = 1 ms
            10 = 2 ms
            11 = 4 ms
            PMIC5120:
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.mtp_swa_power_good_threshold_high_side_voltage_setting,     self.mtp_swa_over_voltage_threshold_setting,     self.mtp_swa_under_voltage_lockout_threshold_setting,     self.mtp_swa_output_soft_stop_time]

class R49 (pyt_reg):
    def __init__(self, name="R49", bus_hd=None, bits_w=8, addr=73, desc="""MTP_SWB_VOLTAGE_SETTING""" ):
        super(R49,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swb_voltage_setting  = pyt_reg_field("mtp_swb_voltage_setting", 7, 1, 0x3c, "RW","""Switch Node B Output Regulator Voltage Setting
            000 0000 = 800 mV
            000 0001 = 805 mV
            000 0010 = 810 mV
            ...
            011 1100 = 1100 mV
            ...
            111 1101 = 1425 mV
            111 1110 = 1430 mV
            111 1111 = 1435 mV""")
        self.mtp_swb_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("mtp_swb_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node B Output Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            1 = -7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]""")
        self.fl = [     self.mtp_swb_voltage_setting,     self.mtp_swb_power_good_threshold_low_side_voltage_setting]

class R4A (pyt_reg):
    def __init__(self, name="R4A", bus_hd=None, bits_w=8, addr=74, desc="""MTP_SWB_OVER_VOLTAGE_THRESHOLD (R26)""" ):
        super(R4A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swb_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("mtp_swb_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node B Output Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = +7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 = +10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            11 = Reserved""")
        self.mtp_swb_over_voltage_threshold_setting  = pyt_reg_field("mtp_swb_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node B Output Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = +10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 =+12.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            11 = Reserved""")
        self.mtp_swb_under_voltage_lockout_threshold_setting  = pyt_reg_field("mtp_swb_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node B Output Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            01 = -12.5% from the setting in Table133, ¡°Register 0x25,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.mtp_swb_output_soft_stop_time  = pyt_reg_field("mtp_swb_output_soft_stop_time", 2, 0, 0x3, "RW","""SWB Output Regulator Soft Stop Time After VR Disable
            4
            PMIC5100:
            00 = 0.5 ms
            01 = 1 ms
            10 = 2 ms
            11 = 4 ms
            PMIC5120:
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.mtp_swb_power_good_threshold_high_side_voltage_setting,     self.mtp_swb_over_voltage_threshold_setting,     self.mtp_swb_under_voltage_lockout_threshold_setting,     self.mtp_swb_output_soft_stop_time]

class R4B (pyt_reg):
    def __init__(self, name="R4B", bus_hd=None, bits_w=8, addr=75, desc="""MTP_SWC_VOLTAGE_SETTING""" ):
        super(R4B,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swc_voltage_setting  = pyt_reg_field("mtp_swc_voltage_setting", 7, 1, 0x3c, "RW","""Switch Node C Output Regulator Voltage Setting
            000 0000 = 1500 mV
            000 0001 = 1505 mV
            000 0010 = 1510 mV
            ...
            011 1100 = 1800 mV
            ...
            111 1101 = 2125 mV
            111 1110 = 2130 mV
            111 1111 = 2135 mV""")
        self.mtp_swc_power_good_threshold_low_side_voltage_setting  = pyt_reg_field("mtp_swc_power_good_threshold_low_side_voltage_setting", 1, 0, 0x0, "RW","""Switch Node C Output Threshold Low Side Voltage For Power Good Status
            0 = -5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            1 = -7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]""")
        self.fl = [     self.mtp_swc_voltage_setting,     self.mtp_swc_power_good_threshold_low_side_voltage_setting]

class R4C (pyt_reg):
    def __init__(self, name="R4C", bus_hd=None, bits_w=8, addr=76, desc="""MTP_SWC_OVER_VOLTAGE_THRESHOLD (copy to R28)""" ):
        super(R4C,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swc_power_good_threshold_high_side_voltage_setting  = pyt_reg_field("mtp_swc_power_good_threshold_high_side_voltage_setting", 2, 6, 0x1, "RW","""Switch Node C Output Threshold High Side Voltage For Power Good Status
            00 = +5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = +7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = +10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            11 = Reserved""")
        self.mtp_swc_over_voltage_threshold_setting  = pyt_reg_field("mtp_swc_over_voltage_threshold_setting", 2, 4, 0x2, "RW","""Switch Node C Output Regulator Threshold For Over Voltage Status
            00 = +7.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = +10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = +12.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            11 = Reserved""")
        self.mtp_swc_under_voltage_lockout_threshold_setting  = pyt_reg_field("mtp_swc_under_voltage_lockout_threshold_setting", 2, 2, 0x0, "RW","""Switch Node C Output Regulator Threshold For Under Voltage Lockout Status
            00 = -10% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            01 = -12.5% from the setting in Table135, ¡°Register 0x27,¡±[7:1]
            10 = Reserved
            11 = Reserved""")
        self.mtp_swc_output_soft_stop_time  = pyt_reg_field("mtp_swc_output_soft_stop_time", 2, 0, 0x3, "RW","""SWC Output Regulator Soft Stop Time After VR Disable
            00 = 1 ms
            01 = 2 ms
            10 = 4 ms
            11 = 8 ms""")
        self.fl = [     self.mtp_swc_power_good_threshold_high_side_voltage_setting,     self.mtp_swc_over_voltage_threshold_setting,     self.mtp_swc_under_voltage_lockout_threshold_setting,     self.mtp_swc_output_soft_stop_time]

class R4D (pyt_reg):
    def __init__(self, name="R4D", bus_hd=None, bits_w=8, addr=77, desc="""MTP SWA MODE (to R29)""" ):
        super(R4D,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swa_mode_select  = pyt_reg_field("mtp_swa_mode_select", 2, 6, 0x2, "RW","""Switch Node AOutput Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)""")
        self.mtp_swa_switching_freq  = pyt_reg_field("mtp_swa_switching_freq", 2, 4, 0x0, "RW","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.reserved      = pyt_reg_field("reserved",      4, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.mtp_swa_mode_select,     self.mtp_swa_switching_freq,     self.reserved]

class R4E (pyt_reg):
    def __init__(self, name="R4E", bus_hd=None, bits_w=8, addr=78, desc="""SWBC MODE (copy to 0x2A  )""" ):
        super(R4E,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swb_mode_select  = pyt_reg_field("mtp_swb_mode_select", 2, 6, 0x2, "RW","""Switch Node AOutput Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)""")
        self.mtp_swb_switching_freq  = pyt_reg_field("mtp_swb_switching_freq", 2, 4, 0x0, "RW","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.mtp_swc_mode_select  = pyt_reg_field("mtp_swc_mode_select", 2, 2, 0x2, "RW","""Switch Node C Output Regulator Mode Selection
            00 = Reserved
            01 = Reserved
            10 = COT; DCM (Constant on Time; Discontinuous Current Mode)
            11 = COT; Forced CCM (Constant on Time; Continuous Current Mode)
            1:0 RW 01
            R2A [1:0]: SWC_SWITCHING_FREQ""")
        self.mtp_swc_switching_freq  = pyt_reg_field("mtp_swc_switching_freq", 2, 0, 0x1, "RW","""Switch Node C Output Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.fl = [     self.mtp_swb_mode_select,     self.mtp_swb_switching_freq,     self.mtp_swc_mode_select,     self.mtp_swc_switching_freq]

class R4F (pyt_reg):
    def __init__(self, name="R4F", bus_hd=None, bits_w=8, addr=79, desc="""SWA_SWB_PHASE_MODE_SELECT""" ):
        super(R4F,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.reserved      = pyt_reg_field("reserved",      7, 1, 0x1, "-","""Reserved""")
        self.swa_swb_phase_mode_select  = pyt_reg_field("swa_swb_phase_mode_select", 1, 0, 0x1, "RW","""Switch Node A and Switch Node B Phase Regulator Mode Selection.
            0 = Single Phase Regulator Mode
            1 = Dual Phase Regulator Mode""")
        self.fl = [     self.reserved,     self.swa_swb_phase_mode_select]

class R50 (pyt_reg):
    def __init__(self, name="R50", bus_hd=None, bits_w=8, addr=80, desc="""SWABC OUTPUT CURRENT LIMITER WARNING""" ):
        super(R50,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swa_output_current_limiter_warning_threshold_setting  = pyt_reg_field("mtp_swa_output_current_limiter_warning_threshold_setting", 2, 6, 0x1, "RW","""For COT Mode, Ivalley_limit:
            (no use PMIC5100:
            00 = 3.0 A
            01 = 3.5 A
            10 = 4.0 A
            11 = Reserved)
            PMIC5120:
            00 = 4.5 A
            01 = 5.5 A
            10 = 6.5A
            11 = 7.5A""")
        self.reserved      = pyt_reg_field("reserved",      2, 4, 0x0, "-","""Reserved""")
        self.mtp_swb_output_current_limiter_warning_threshold_setting  = pyt_reg_field("mtp_swb_output_current_limiter_warning_threshold_setting", 2, 2, 0x1, "RW","""For COT Mode, Ivalley_limit
            (no use PMIC5100:
            00 = 3.0 A
            01 = 3.5 A
            10 = 4.0 A
            11 = Reserved)
            PMIC5120:
            00 = 4.5 A
            01 = 5.5 A
            10 = 6.5 A
            11 = 7.5A""")
        self.mtp_swc_output_current_limiter_warning_threshold_setting  = pyt_reg_field("mtp_swc_output_current_limiter_warning_threshold_setting", 2, 0, 0x0, "RW","""For COT Mode, Ivalley_limit:
            (no use PMIC5100:
            00 = 0.5 A
            01 = 1.0 A
            10 = Reserved
            11 = Reserved)
            PMIC5120:
            00 = 1.5 A
            01 = 2.0 A
            10 = Reserved
            11 = Reserved""")
        self.fl = [     self.mtp_swa_output_current_limiter_warning_threshold_setting,     self.reserved,     self.mtp_swb_output_current_limiter_warning_threshold_setting,     self.mtp_swc_output_current_limiter_warning_threshold_setting]

class R51 (pyt_reg):
    def __init__(self, name="R51", bus_hd=None, bits_w=8, addr=81, desc="""VOUT_LDO_VOLTAGE_SETTING (copy to R2B)  """ ):
        super(R51,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_vout_1p8v_voltage_setting  = pyt_reg_field("mtp_vout_1p8v_voltage_setting", 2, 6, 0x1, "RW","""VOUT 1.8 V LDO Output Voltage Setting
            00 = 1.7 V
            01 = 1.8 V
            10 = 1.9 V
            11 = 2.0 V""")
        self.reserved      = pyt_reg_field("reserved",      3, 3, 0x0, "-","""Switch Node AOutput Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.mtp_vout_1p0v_voltage_setting  = pyt_reg_field("mtp_vout_1p0v_voltage_setting", 2, 1, 0x1, "RW","""VOUT 1.0VLDO Voltage Setting
            00 = 0.9 V
            01 = 1.0 V
            10 = 1.1 V
            11 = 1.2 V""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x1, "-","""Switch Node C Output Regulator Switching Frequency
            00 = 750 KHz
            01 = Vendor Specific
            10 = Vendor Specific
            11 = Vendor Specific""")
        self.fl = [     self.mtp_vout_1p8v_voltage_setting,     self.reserved,     self.mtp_vout_1p0v_voltage_setting,     self.reserved]

class R58 (pyt_reg):
    def __init__(self, name="R58", bus_hd=None, bits_w=8, addr=88, desc="""POWER OFF SEQUANCE SETTING CONFIG0""" ):
        super(R58,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_off_sequence_config0  = pyt_reg_field("power_off_sequence_config0", 1, 7, 0x0, "RW","""PMIC Power Off Sequence Config 0
            0 = Do Not Execute Config 0
            1 = Execute Config 0""")
        self.power_off_sequence_config0_swa_disable  = pyt_reg_field("power_off_sequence_config0_swa_disable", 1, 6, 0x0, "RW","""Disable Switch Node AOutput Regulator.
            0 = Do Not Disable Switch Node AOutput Regulator
            1 = Disable Switch Node AOutput Regulator]""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_off_sequence_config0_swb_disable  = pyt_reg_field("power_off_sequence_config0_swb_disable", 1, 4, 0x0, "RW","""Disable Switch Node B Output Regulator.
            0 = Do Not Disable Switch Node BOutput Regulator
            1 = Disable Switch Node BOutput Regulator""")
        self.power_off_sequence_config0_swc_disable  = pyt_reg_field("power_off_sequence_config0_swc_disable", 1, 3, 0x0, "RW","""Disable Switch Node C Output Regulator.
            0 = Do Not Disable Switch Node COutput Regulator
            1 = Disable Switch Node COutput Regulator""")
        self.power_off_sequence_config0_idle  = pyt_reg_field("power_off_sequence_config0_idle", 3, 0, 0x0, "RW","""Idle time after Power Off Sequence Config 0
            000 = 0 ms
            001 = 1 ms
            010 = 2 ms
            011 = 3 ms
            100 = 4 ms
            101 = 5 ms
            110 = 6 ms
            111 = 7 ms""")
        self.fl = [     self.power_off_sequence_config0,     self.power_off_sequence_config0_swa_disable,     self.reserved,     self.power_off_sequence_config0_swb_disable,     self.power_off_sequence_config0_swc_disable,     self.power_off_sequence_config0_idle]

class R59 (pyt_reg):
    def __init__(self, name="R59", bus_hd=None, bits_w=8, addr=89, desc="""POWER OFF SEQUANCE SETTING CONFIG1""" ):
        super(R59,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_off_sequence_config1  = pyt_reg_field("power_off_sequence_config1", 1, 7, 0x0, "RW","""PMIC Power Off Sequence Config 1
            0 = Do Not Execute Config 1
            1 = Execute Config 1""")
        self.power_off_sequence_config1_swa_disable  = pyt_reg_field("power_off_sequence_config1_swa_disable", 1, 6, 0x0, "RW","""Disable Switch Node AOutput Regulator.
            0 = Do Not Disable Switch Node AOutput Regulator
            1 = Disable Switch Node AOutput Regulator]""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_off_sequence_config1_swb_disable  = pyt_reg_field("power_off_sequence_config1_swb_disable", 1, 4, 0x0, "RW","""Disable Switch Node B Output Regulator.
            0 = Do Not Disable Switch Node BOutput Regulator
            1 = Disable Switch Node BOutput Regulator""")
        self.power_off_sequence_config1_swc_disable  = pyt_reg_field("power_off_sequence_config1_swc_disable", 1, 3, 0x0, "RW","""Disable Switch Node C Output Regulator.
            0 = Do Not Disable Switch Node COutput Regulator
            1 = Disable Switch Node COutput Regulator""")
        self.power_off_sequence_config1_idle  = pyt_reg_field("power_off_sequence_config1_idle", 3, 0, 0x0, "RW","""Idle time after Power Off Sequence Config 1
            000 = 0 ms
            001 = 1 ms
            010 = 2 ms
            011 = 3 ms
            100 = 4 ms
            101 = 5 ms
            110 = 6 ms
            111 = 7 ms""")
        self.fl = [     self.power_off_sequence_config1,     self.power_off_sequence_config1_swa_disable,     self.reserved,     self.power_off_sequence_config1_swb_disable,     self.power_off_sequence_config1_swc_disable,     self.power_off_sequence_config1_idle]

class R5A (pyt_reg):
    def __init__(self, name="R5A", bus_hd=None, bits_w=8, addr=90, desc="""POWER OFF SEQUANCE SETTING CONFIG2""" ):
        super(R5A,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.power_off_sequence_config2  = pyt_reg_field("power_off_sequence_config2", 1, 7, 0x0, "RW","""PMIC Power Off Sequence Config 2
            0 = Do Not Execute Config 2
            1 = Execute Config 2""")
        self.power_off_sequence_config2_swa_disable  = pyt_reg_field("power_off_sequence_config2_swa_disable", 1, 6, 0x0, "RW","""Disable Switch Node AOutput Regulator.
            0 = Do Not Disable Switch Node AOutput Regulator
            1 = Disable Switch Node AOutput Regulator""")
        self.reserved      = pyt_reg_field("reserved",      1, 5, 0x0, "-","""Reserved""")
        self.power_off_sequence_config2_swb_disable  = pyt_reg_field("power_off_sequence_config2_swb_disable", 1, 4, 0x0, "RW","""Disable Switch Node B Output Regulator.
            0 = Do Not Disable Switch Node BOutput Regulator
            1 = Disable Switch Node BOutput Regulator""")
        self.power_off_sequence_config2_swc_disable  = pyt_reg_field("power_off_sequence_config2_swc_disable", 1, 3, 0x0, "RW","""Disable Switch Node C Output Regulator.
            0 = Do Not Disable Switch Node COutput Regulator
            1 = Disable Switch Node COutput Regulator""")
        self.power_off_sequence_config2_idle  = pyt_reg_field("power_off_sequence_config2_idle", 3, 0, 0x0, "RW","""Idle time after Power Off Sequence Config 2
            000 = 0 ms
            001 = 1 ms
            010 = 2 ms
            011 = 3 ms
            100 = 4 ms
            101 = 5 ms
            110 = 6 ms
            111 = 7 ms""")
        self.fl = [     self.power_off_sequence_config2,     self.power_off_sequence_config2_swa_disable,     self.reserved,     self.power_off_sequence_config2_swb_disable,     self.power_off_sequence_config2_swc_disable,     self.power_off_sequence_config2_idle]

class R5D (pyt_reg):
    def __init__(self, name="R5D", bus_hd=None, bits_w=8, addr=93, desc="""MTP_SWA_OUTPUT_SOFT_START_TIME (copy to)""" ):
        super(R5D,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swa_output_soft_start_time  = pyt_reg_field("mtp_swa_output_soft_start_time", 3, 5, 0x2, "RW","""SWA Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      5, 0, 0x0, "-","""Reserved""")
        self.fl = [     self.mtp_swa_output_soft_start_time,     self.reserved]

class R5E (pyt_reg):
    def __init__(self, name="R5E", bus_hd=None, bits_w=8, addr=94, desc="""MTP_SWBC_OUTPUT_SOFT_START_TIME (copy to)  """ ):
        super(R5E,self).__init__(name,bus_hd,bits_w,addr,desc)
        self.mtp_swb_output_soft_start_time  = pyt_reg_field("mtp_swb_output_soft_start_time", 3, 5, 0x1, "RW","""SWB Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      1, 4, 0x0, "-","""Reserved""")
        self.mtp_swc_output_soft_start_time  = pyt_reg_field("mtp_swc_output_soft_start_time", 3, 1, 0x1, "RW","""SWC Output Regulator Soft Start Time After VR Enable
            000 = 1 ms
            001 = 2 ms
            010 = 4 ms
            011 = 6 ms
            ...
            111 = 14 ms""")
        self.reserved      = pyt_reg_field("reserved",      1, 0, 0x1, "-","""Reserved""")
        self.fl = [     self.mtp_swb_output_soft_start_time,     self.reserved,     self.mtp_swc_output_soft_start_time,     self.reserved]


######################### pack up all reg to sheet Module ############
class PMIC5120():
    def __init__(self, bus_hd):
        self.R04              = R04("U_R04" , bus_hd)
        self.R05              = R05("U_R05" , bus_hd)
        self.R06              = R06("U_R06" , bus_hd)
        self.R08              = R08("U_R08" , bus_hd)
        self.R09              = R09("U_R09" , bus_hd)
        self.R0A              = R0A("U_R0A" , bus_hd)
        self.R0B              = R0B("U_R0B" , bus_hd)
        self.R0C              = R0C("U_R0C" , bus_hd)
        self.R0E              = R0E("U_R0E" , bus_hd)
        self.R0F              = R0F("U_R0F" , bus_hd)
        self.R10              = R10("U_R10" , bus_hd)
        self.R11              = R11("U_R11" , bus_hd)
        self.R12              = R12("U_R12" , bus_hd)
        self.R13              = R13("U_R13" , bus_hd)
        self.R14              = R14("U_R14" , bus_hd)
        self.R15              = R15("U_R15" , bus_hd)
        self.R16              = R16("U_R16" , bus_hd)
        self.R17              = R17("U_R17" , bus_hd)
        self.R18              = R18("U_R18" , bus_hd)
        self.R19              = R19("U_R19" , bus_hd)
        self.R1A              = R1A("U_R1A" , bus_hd)
        self.R1B              = R1B("U_R1B" , bus_hd)
        self.R1C              = R1C("U_R1C" , bus_hd)
        self.R1E              = R1E("U_R1E" , bus_hd)
        self.R1F              = R1F("U_R1F" , bus_hd)
        self.R20              = R20("U_R20" , bus_hd)
        self.R21              = R21("U_R21" , bus_hd)
        self.R22              = R22("U_R22" , bus_hd)
        self.R25              = R25("U_R25" , bus_hd)
        self.R26              = R26("U_R26" , bus_hd)
        self.R27              = R27("U_R27" , bus_hd)
        self.R28              = R28("U_R28" , bus_hd)
        self.R29              = R29("U_R29" , bus_hd)
        self.R2A              = R2A("U_R2A" , bus_hd)
        self.R2B              = R2B("U_R2B" , bus_hd)
        self.R2C              = R2C("U_R2C" , bus_hd)
        self.R2D              = R2D("U_R2D" , bus_hd)
        self.R2E              = R2E("U_R2E" , bus_hd)
        self.R2F              = R2F("U_R2F" , bus_hd)
        self.R30              = R30("U_R30" , bus_hd)
        self.R31              = R31("U_R31" , bus_hd)
        self.R32              = R32("U_R32" , bus_hd)
        self.R33              = R33("U_R33" , bus_hd)
        self.R34              = R34("U_R34" , bus_hd)
        self.R35              = R35("U_R35" , bus_hd)
        self.R37              = R37("U_R37" , bus_hd)
        self.R38              = R38("U_R38" , bus_hd)
        self.R39              = R39("U_R39" , bus_hd)
        self.R3A              = R3A("U_R3A" , bus_hd)
        self.R3B              = R3B("U_R3B" , bus_hd)
        self.R3C              = R3C("U_R3C" , bus_hd)
        self.R3D              = R3D("U_R3D" , bus_hd)
        self.R40              = R40("U_R40" , bus_hd)
        self.R41              = R41("U_R41" , bus_hd)
        self.R42              = R42("U_R42" , bus_hd)
        self.R45              = R45("U_R45" , bus_hd)
        self.R46              = R46("U_R46" , bus_hd)
        self.R49              = R49("U_R49" , bus_hd)
        self.R4A              = R4A("U_R4A" , bus_hd)
        self.R4B              = R4B("U_R4B" , bus_hd)
        self.R4C              = R4C("U_R4C" , bus_hd)
        self.R4D              = R4D("U_R4D" , bus_hd)
        self.R4E              = R4E("U_R4E" , bus_hd)
        self.R4F              = R4F("U_R4F" , bus_hd)
        self.R50              = R50("U_R50" , bus_hd)
        self.R51              = R51("U_R51" , bus_hd)
        self.R58              = R58("U_R58" , bus_hd)
        self.R59              = R59("U_R59" , bus_hd)
        self.R5A              = R5A("U_R5A" , bus_hd)
        self.R5D              = R5D("U_R5D" , bus_hd)
        self.R5E              = R5E("U_R5E" , bus_hd)
        self.rl = [self.R04,self.R05,self.R06,self.R08,self.R09,self.R0A,self.R0B,self.R0C,self.R0E,self.R0F,self.R10,self.R11,self.R12,self.R13,self.R14,self.R15,self.R16,self.R17,self.R18,self.R19,self.R1A,self.R1B,self.R1C,self.R1E,self.R1F,self.R20,self.R21,self.R22,self.R25,self.R26,self.R27,self.R28,self.R29,self.R2A,self.R2B,self.R2C,self.R2D,self.R2E,self.R2F,self.R30,self.R31,self.R32,self.R33,self.R34,self.R35,self.R37,self.R38,self.R39,self.R3A,self.R3B,self.R3C,self.R3D,self.R40,self.R41,self.R42,self.R45,self.R46,self.R49,self.R4A,self.R4B,self.R4C,self.R4D,self.R4E,self.R4F,self.R50,self.R51,self.R58,self.R59,self.R5A,self.R5D,self.R5E]
        self.dic_name = {\
                             "R04":self.R04,\
                             "R05":self.R05,\
                             "R06":self.R06,\
                             "R08":self.R08,\
                             "R09":self.R09,\
                             "R0A":self.R0A,\
                             "R0B":self.R0B,\
                             "R0C":self.R0C,\
                             "R0E":self.R0E,\
                             "R0F":self.R0F,\
                             "R10":self.R10,\
                             "R11":self.R11,\
                             "R12":self.R12,\
                             "R13":self.R13,\
                             "R14":self.R14,\
                             "R15":self.R15,\
                             "R16":self.R16,\
                             "R17":self.R17,\
                             "R18":self.R18,\
                             "R19":self.R19,\
                             "R1A":self.R1A,\
                             "R1B":self.R1B,\
                             "R1C":self.R1C,\
                             "R1E":self.R1E,\
                             "R1F":self.R1F,\
                             "R20":self.R20,\
                             "R21":self.R21,\
                             "R22":self.R22,\
                             "R25":self.R25,\
                             "R26":self.R26,\
                             "R27":self.R27,\
                             "R28":self.R28,\
                             "R29":self.R29,\
                             "R2A":self.R2A,\
                             "R2B":self.R2B,\
                             "R2C":self.R2C,\
                             "R2D":self.R2D,\
                             "R2E":self.R2E,\
                             "R2F":self.R2F,\
                             "R30":self.R30,\
                             "R31":self.R31,\
                             "R32":self.R32,\
                             "R33":self.R33,\
                             "R34":self.R34,\
                             "R35":self.R35,\
                             "R37":self.R37,\
                             "R38":self.R38,\
                             "R39":self.R39,\
                             "R3A":self.R3A,\
                             "R3B":self.R3B,\
                             "R3C":self.R3C,\
                             "R3D":self.R3D,\
                             "R40":self.R40,\
                             "R41":self.R41,\
                             "R42":self.R42,\
                             "R45":self.R45,\
                             "R46":self.R46,\
                             "R49":self.R49,\
                             "R4A":self.R4A,\
                             "R4B":self.R4B,\
                             "R4C":self.R4C,\
                             "R4D":self.R4D,\
                             "R4E":self.R4E,\
                             "R4F":self.R4F,\
                             "R50":self.R50,\
                             "R51":self.R51,\
                             "R58":self.R58,\
                             "R59":self.R59,\
                             "R5A":self.R5A,\
                             "R5D":self.R5D,\
                             "R5E":self.R5E}
        self.dic_addr = { \
                           0x4:self.R04,\
                           0x5:self.R05,\
                           0x6:self.R06,\
                           0x8:self.R08,\
                           0x9:self.R09,\
                           0xa:self.R0A,\
                           0xb:self.R0B,\
                           0xc:self.R0C,\
                           0xe:self.R0E,\
                           0xf:self.R0F,\
                           0x10:self.R10,\
                           0x11:self.R11,\
                           0x12:self.R12,\
                           0x13:self.R13,\
                           0x14:self.R14,\
                           0x15:self.R15,\
                           0x16:self.R16,\
                           0x17:self.R17,\
                           0x18:self.R18,\
                           0x19:self.R19,\
                           0x1a:self.R1A,\
                           0x1b:self.R1B,\
                           0x1c:self.R1C,\
                           0x1e:self.R1E,\
                           0x1f:self.R1F,\
                           0x20:self.R20,\
                           0x21:self.R21,\
                           0x22:self.R22,\
                           0x25:self.R25,\
                           0x26:self.R26,\
                           0x27:self.R27,\
                           0x28:self.R28,\
                           0x29:self.R29,\
                           0x2a:self.R2A,\
                           0x2b:self.R2B,\
                           0x2c:self.R2C,\
                           0x2d:self.R2D,\
                           0x2e:self.R2E,\
                           0x2f:self.R2F,\
                           0x30:self.R30,\
                           0x31:self.R31,\
                           0x32:self.R32,\
                           0x33:self.R33,\
                           0x34:self.R34,\
                           0x35:self.R35,\
                           0x37:self.R37,\
                           0x38:self.R38,\
                           0x39:self.R39,\
                           0x3a:self.R3A,\
                           0x3b:self.R3B,\
                           0x3c:self.R3C,\
                           0x3d:self.R3D,\
                           0x40:self.R40,\
                           0x41:self.R41,\
                           0x42:self.R42,\
                           0x45:self.R45,\
                           0x46:self.R46,\
                           0x49:self.R49,\
                           0x4a:self.R4A,\
                           0x4b:self.R4B,\
                           0x4c:self.R4C,\
                           0x4d:self.R4D,\
                           0x4e:self.R4E,\
                           0x4f:self.R4F,\
                           0x50:self.R50,\
                           0x51:self.R51,\
                           0x58:self.R58,\
                           0x59:self.R59,\
                           0x5a:self.R5A,\
                           0x5d:self.R5D,\
                           0x5e:self.R5E}


######################### usage reg module example ############


class FACE_PMIC5120_BUS_HD():
     def __init__(self,name="FAKE_BUS"):                
          self.name = name                           
     def read (self,addr):                        
         return 0x1f;                               
     def write (self,addr,wdata):                  
         return 0x1;                                



if __name__ == '__main__':     
    bus_hd = FACE_PMIC5120_BUS_HD()
    CHIP_REG = PMIC5120(bus_hd)      
    print(CHIP_REG.dic_name.keys()) 
    print(CHIP_REG.dic_addr.keys()) 
                 
